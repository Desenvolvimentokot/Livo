{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"system-ui\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"Menlo\", \"monospace\"],\n      },\n      fontSize: {\n        'responsive-sm': ['0.875rem', { lineHeight: '1.25rem' }],\n        'responsive-base': ['1rem', { lineHeight: '1.5rem' }],\n        'responsive-lg': ['1.125rem', { lineHeight: '1.75rem' }],\n        'responsive-xl': ['1.25rem', { lineHeight: '1.75rem' }],\n        'responsive-2xl': ['1.5rem', { lineHeight: '2rem' }],\n        'responsive-3xl': ['1.875rem', { lineHeight: '2.25rem' }],\n      },\n      spacing: {\n        'responsive': 'var(--spacing)',\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.3s ease-out\",\n        \"pulse-slow\": \"pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n        \"bounce-subtle\": \"bounce 1s infinite\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(10px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n      },\n      boxShadow: {\n        'soft': '0 2px 15px -3px rgba(0, 0, 0, 0.07), 0 10px 20px -2px rgba(0, 0, 0, 0.04)',\n        'medium': '0 4px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',\n        'strong': '0 25px 50px -12px rgba(0, 0, 0, 0.25)',\n      },\n      backdropBlur: {\n        xs: '2px',\n      },\n      backgroundImage: {\n        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',\n        'gradient-conic': 'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',\n      },\n      screens: {\n        'xs': '475px',\n        '3xl': '1600px',\n      },\n      zIndex: {\n        '60': '60',\n        '70': '70',\n        '80': '80',\n        '90': '90',\n        '100': '100',\n      },\n      letterSpacing: {\n        'wider': '0.05em',\n        'widest': '0.1em',\n      },\n    },\n  },\n  plugins: [\n    require(\"tailwindcss-animate\"), \n    require(\"@tailwindcss/typography\"),\n    // Custom plugin for additional utilities\n    function({ addUtilities }: any) {\n      const newUtilities = {\n        '.text-balance': {\n          'text-wrap': 'balance',\n        },\n        '.text-pretty': {\n          'text-wrap': 'pretty',\n        },\n        '.scrollbar-hide': {\n          '-ms-overflow-style': 'none',\n          'scrollbar-width': 'none',\n          '&::-webkit-scrollbar': {\n            display: 'none',\n          },\n        },\n        '.scrollbar-thin': {\n          'scrollbar-width': 'thin',\n          '&::-webkit-scrollbar': {\n            width: '8px',\n            height: '8px',\n          },\n        },\n      };\n      addUtilities(newUtilities);\n    }\n  ],\n} satisfies Config;\n","size_bytes":5215},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { requireAuth, type AuthenticatedRequest } from \"./middleware/auth\";\nimport { insertDocumentSchema, insertJobSchema } from \"@shared/schema\";\nimport { addVideoProcessingJob, getQueueStats } from \"./jobs/videoProcessor\";\nimport { websocketService } from \"./services/websocketService\";\nimport * as youtubeService from \"./services/youtubeService\";\nimport path from \"path\";\nimport fs from \"fs/promises\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Video processing routes\n  app.post('/api/videos/process', isAuthenticated, async (req: any, res) => {\n    try {\n      const { youtubeUrl, documentType } = req.body;\n      const userId = req.user!.claims.sub;\n      \n      // Validate input\n      if (!youtubeUrl || !documentType) {\n        return res.status(400).json({\n          error: 'YouTube URL and document type are required'\n        });\n      }\n      \n      const validTypes = ['EBOOK', 'TUTORIAL', 'GUIDE', 'RECIPE', 'PRESENTATION', 'SUMMARY'];\n      if (!validTypes.includes(documentType)) {\n        return res.status(400).json({\n          error: 'Invalid document type'\n        });\n      }\n      \n      // Extract and validate video\n      const videoId = youtubeService.extractVideoId(youtubeUrl);\n      const videoInfo = await youtubeService.getVideoInfo(videoId);\n      \n      // Check user's hour limit\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n      \n      const durationHours = videoInfo.duration / 3600;\n      \n      if ((user.hoursUsed || 0) + durationHours > (user.hoursLimit || 0.5)) {\n        return res.status(403).json({\n          error: 'Hour limit exceeded',\n          hoursNeeded: durationHours,\n          hoursAvailable: (user.hoursLimit || 0.5) - (user.hoursUsed || 0)\n        });\n      }\n      \n      // Create document in database\n      const document = await storage.createDocument({\n        userId,\n        youtubeUrl,\n        documentType: documentType as any,\n        status: 'PROCESSING'\n      });\n      \n      // Create processing job\n      const job = await storage.createJob({\n        userId,\n        documentId: document.id,\n        status: 'PENDING',\n        progress: 0\n      });\n      \n      // Add to processing queue\n      await addVideoProcessingJob({\n        youtubeUrl,\n        documentType: documentType as any,\n        userId,\n        documentId: document.id,\n        jobId: job.id,\n        userPlan: user.plan || 'FREE'\n      });\n      \n      res.json({\n        success: true,\n        documentId: document.id,\n        jobId: job.id,\n        estimatedDuration: videoInfo.duration,\n        processingTime: Math.max(60, videoInfo.duration / 60)\n      });\n      \n    } catch (error: any) {\n      console.error('Error processing video:', error);\n      res.status(400).json({\n        error: error.message\n      });\n    }\n  });\n\n  // Get video info without processing\n  app.post('/api/videos/info', isAuthenticated, async (req: any, res) => {\n    try {\n      const { youtubeUrl } = req.body;\n      \n      if (!youtubeUrl) {\n        return res.status(400).json({ error: 'URL is required' });\n      }\n      \n      const videoId = youtubeService.extractVideoId(youtubeUrl);\n      const videoInfo = await youtubeService.getVideoInfo(videoId);\n      \n      const durationHours = videoInfo.duration / 3600;\n      const user = await storage.getUser(req.user!.claims.sub);\n      \n      if (!user) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n      \n      res.json({\n        videoId,\n        duration: videoInfo.duration,\n        durationFormatted: youtubeService.formatDuration(videoInfo.duration),\n        thumbnail: videoInfo.thumbnail,\n        hoursNeeded: Math.round(durationHours * 100) / 100,\n        canProcess: (user.hoursUsed || 0) + durationHours <= (user.hoursLimit || 0.5),\n        hoursAvailable: (user.hoursLimit || 0.5) - (user.hoursUsed || 0)\n      });\n      \n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Get job progress\n  app.get('/api/jobs/:jobId/progress', isAuthenticated, async (req: any, res) => {\n    try {\n      const { jobId } = req.params;\n      const userId = req.user!.claims.sub;\n      \n      const job = await storage.getJob(parseInt(jobId));\n      \n      if (!job || job.userId !== userId) {\n        return res.status(404).json({ error: 'Job not found' });\n      }\n      \n      const document = await storage.getDocument(job.documentId);\n      \n      res.json({\n        jobId: job.id,\n        status: job.status,\n        progress: job.progress,\n        currentStep: job.currentStep,\n        errorMessage: job.errorMessage,\n        document\n      });\n      \n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Document routes\n  app.get('/api/documents', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const { page = 1, limit = 10, status, type } = req.query;\n      \n      const documents = await storage.getUserDocuments(\n        userId,\n        parseInt(limit as string),\n        (parseInt(page as string) - 1) * parseInt(limit as string)\n      );\n      \n      res.json({\n        documents: documents.map(doc => ({\n          id: doc.id,\n          youtubeUrl: doc.youtubeUrl,\n          videoTitle: doc.videoTitle,\n          documentType: doc.documentType,\n          status: doc.status,\n          createdAt: doc.createdAt,\n          updatedAt: doc.updatedAt,\n          fileSize: doc.filePath ? 'Available' : null,\n        })),\n        pagination: {\n          page: parseInt(page as string),\n          limit: parseInt(limit as string),\n          total: documents.length,\n          pages: Math.ceil(documents.length / parseInt(limit as string))\n        }\n      });\n      \n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Get single document\n  app.get('/api/documents/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user!.claims.sub;\n      \n      const document = await storage.getDocument(parseInt(id));\n      \n      if (!document || document.userId !== userId) {\n        return res.status(404).json({ error: 'Document not found' });\n      }\n      \n      res.json(document);\n      \n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Download document\n  app.get('/api/documents/:id/download', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = req.user!.claims.sub;\n      \n      const document = await storage.getDocument(parseInt(id));\n      \n      if (!document || document.userId !== userId) {\n        return res.status(404).json({ error: 'Document not found' });\n      }\n      \n      if (!document.filePath || document.status !== 'COMPLETED') {\n        return res.status(400).json({ error: 'Document not ready for download' });\n      }\n      \n      try {\n        const fileContent = await fs.readFile(document.filePath, 'utf8');\n        res.setHeader('Content-Type', 'text/html');\n        res.setHeader('Content-Disposition', `attachment; filename=\"${document.videoTitle || 'document'}.html\"`);\n        res.send(fileContent);\n      } catch (fileError) {\n        res.status(404).json({ error: 'Document file not found' });\n      }\n      \n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Dashboard stats\n  app.get('/api/dashboard/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user!.claims.sub;\n      const stats = await storage.getUserStats(userId);\n      \n      res.json(stats);\n      \n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Queue stats\n  app.get('/api/queue/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const stats = await getQueueStats();\n      res.json(stats);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // Initialize WebSocket service for real-time updates\n  websocketService.initialize(httpServer);\n\n  return httpServer;\n}\n","size_bytes":8951},"server/storage.ts":{"content":"import {\n  users,\n  documents,\n  jobs,\n  type User,\n  type UpsertUser,\n  type Document,\n  type InsertDocument,\n  type Job,\n  type InsertJob,\n  type DocumentType,\n  type ProcessStatus,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations (IMPORTANT) these user operations are mandatory for Replit Auth.\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Document operations\n  createDocument(document: InsertDocument): Promise<Document>;\n  getDocument(id: number): Promise<Document | undefined>;\n  getUserDocuments(userId: string, limit?: number, offset?: number): Promise<Document[]>;\n  updateDocument(id: number, updates: Partial<Document>): Promise<Document>;\n  deleteDocument(id: number): Promise<void>;\n  \n  // Job operations\n  createJob(job: InsertJob): Promise<Job>;\n  getJob(id: number): Promise<Job | undefined>;\n  getUserJobs(userId: string): Promise<Job[]>;\n  updateJob(id: number, updates: Partial<Job>): Promise<Job>;\n  getJobByDocumentId(documentId: number): Promise<Job | undefined>;\n  \n  // Statistics\n  getUserStats(userId: string): Promise<{\n    documentsCount: number;\n    hoursUsed: number;\n    hoursLimit: number;\n    successRate: number;\n    plan: string;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (IMPORTANT) these user operations are mandatory for Replit Auth.\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Document operations\n  async createDocument(document: InsertDocument): Promise<Document> {\n    const [newDocument] = await db\n      .insert(documents)\n      .values(document)\n      .returning();\n    return newDocument;\n  }\n\n  async getDocument(id: number): Promise<Document | undefined> {\n    const [document] = await db\n      .select()\n      .from(documents)\n      .where(eq(documents.id, id));\n    return document;\n  }\n\n  async getUserDocuments(userId: string, limit = 10, offset = 0): Promise<Document[]> {\n    return await db\n      .select()\n      .from(documents)\n      .where(eq(documents.userId, userId))\n      .orderBy(desc(documents.createdAt))\n      .limit(limit)\n      .offset(offset);\n  }\n\n  async updateDocument(id: number, updates: Partial<Document>): Promise<Document> {\n    const [updatedDocument] = await db\n      .update(documents)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(documents.id, id))\n      .returning();\n    return updatedDocument;\n  }\n\n  async deleteDocument(id: number): Promise<void> {\n    await db.delete(documents).where(eq(documents.id, id));\n  }\n\n  // Job operations\n  async createJob(job: InsertJob): Promise<Job> {\n    const [newJob] = await db\n      .insert(jobs)\n      .values(job)\n      .returning();\n    return newJob;\n  }\n\n  async getJob(id: number): Promise<Job | undefined> {\n    const [job] = await db\n      .select()\n      .from(jobs)\n      .where(eq(jobs.id, id));\n    return job;\n  }\n\n  async getUserJobs(userId: string): Promise<Job[]> {\n    return await db\n      .select()\n      .from(jobs)\n      .where(eq(jobs.userId, userId))\n      .orderBy(desc(jobs.createdAt));\n  }\n\n  async updateJob(id: number, updates: Partial<Job>): Promise<Job> {\n    const [updatedJob] = await db\n      .update(jobs)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(jobs.id, id))\n      .returning();\n    return updatedJob;\n  }\n\n  async getJobByDocumentId(documentId: number): Promise<Job | undefined> {\n    const [job] = await db\n      .select()\n      .from(jobs)\n      .where(eq(jobs.documentId, documentId))\n      .orderBy(desc(jobs.createdAt))\n      .limit(1);\n    return job;\n  }\n\n  // Statistics\n  async getUserStats(userId: string): Promise<{\n    documentsCount: number;\n    hoursUsed: number;\n    hoursLimit: number;\n    successRate: number;\n    plan: string;\n  }> {\n    const user = await this.getUser(userId);\n    if (!user) {\n      return { documentsCount: 0, hoursUsed: 0, hoursLimit: 0.5, successRate: 0, plan: 'FREE' };\n    }\n\n    const [{ count: documentsCount }] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(documents)\n      .where(eq(documents.userId, userId));\n\n    const [{ completed = 0, total = 0 }] = await db\n      .select({\n        completed: sql<number>`count(*) filter (where status = 'COMPLETED')`,\n        total: sql<number>`count(*)`\n      })\n      .from(documents)\n      .where(eq(documents.userId, userId));\n\n    const successRate = total > 0 ? Math.round((completed / total) * 100) : 0;\n\n    return {\n      documentsCount: Number(documentsCount),\n      hoursUsed: user.hoursUsed || 0,\n      hoursLimit: user.hoursLimit || 0.5,\n      successRate,\n      plan: user.plan || 'FREE',\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":5250},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  real,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Enums - declared first to be used in tables\nexport const planEnum = pgEnum(\"plan\", [\"FREE\", \"PRO\", \"BUSINESS\"]);\nexport const documentTypeEnum = pgEnum(\"document_type\", [\"EBOOK\", \"TUTORIAL\", \"GUIDE\", \"RECIPE\", \"PRESENTATION\", \"SUMMARY\"]);\nexport const processStatusEnum = pgEnum(\"process_status\", [\"PROCESSING\", \"COMPLETED\", \"FAILED\"]);\nexport const jobStatusEnum = pgEnum(\"job_status\", [\"PENDING\", \"PROCESSING\", \"COMPLETED\", \"FAILED\"]);\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  plan: planEnum(\"plan\").default(\"FREE\"),\n  hoursUsed: real(\"hours_used\").default(0).notNull(),\n  hoursLimit: real(\"hours_limit\").default(0.5).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Documents table\nexport const documents = pgTable(\"documents\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  youtubeUrl: text(\"youtube_url\").notNull(),\n  videoTitle: text(\"video_title\"),\n  videoDuration: integer(\"video_duration\"), // in seconds\n  documentType: documentTypeEnum(\"document_type\").notNull(),\n  content: jsonb(\"content\"),\n  status: processStatusEnum(\"status\").default(\"PROCESSING\"),\n  filePath: text(\"file_path\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Jobs table for processing queue\nexport const jobs = pgTable(\"jobs\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  documentId: integer(\"document_id\").notNull().references(() => documents.id),\n  status: jobStatusEnum(\"status\").default(\"PENDING\"),\n  progress: integer(\"progress\").default(0),\n  currentStep: text(\"current_step\"),\n  errorMessage: text(\"error_message\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  documents: many(documents),\n  jobs: many(jobs),\n}));\n\nexport const documentsRelations = relations(documents, ({ one, many }) => ({\n  user: one(users, {\n    fields: [documents.userId],\n    references: [users.id],\n  }),\n  jobs: many(jobs),\n}));\n\nexport const jobsRelations = relations(jobs, ({ one }) => ({\n  user: one(users, {\n    fields: [jobs.userId],\n    references: [users.id],\n  }),\n  document: one(documents, {\n    fields: [jobs.documentId],\n    references: [documents.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDocumentSchema = createInsertSchema(documents).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertJobSchema = createInsertSchema(jobs).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\nexport type Document = typeof documents.$inferSelect;\nexport type InsertJob = z.infer<typeof insertJobSchema>;\nexport type Job = typeof jobs.$inferSelect;\nexport type Plan = typeof users.$inferSelect.plan;\nexport type DocumentType = typeof documents.$inferSelect.documentType;\nexport type ProcessStatus = typeof documents.$inferSelect.status;\nexport type JobStatus = typeof jobs.$inferSelect.status;\n","size_bytes":4392},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/Landing\";\nimport Home from \"@/pages/Home\";\nimport Processing from \"@/pages/Processing\";\nimport Editor from \"@/pages/Editor\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/processing/:jobId\" component={Processing} />\n          <Route path=\"/editor/:documentId\" component={Editor} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1187},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(262.1, 83.3%, 57.8%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(262.1, 83.3%, 57.8%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(221.2, 83.2%, 53.3%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(262.1, 83.3%, 57.8%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(221.2, 83.2%, 53.3%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 2px 4px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 4px 6px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 8px 10px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217.2, 91.2%, 59.8%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(224.3, 76.3%, 94.1%);\n  --sidebar: hsl(222.2, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-ring: hsl(221.2, 83.2%, 53.3%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 2px 4px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 4px 6px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 8px 10px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-semibold;\n  }\n\n  /* Scrollbar styling */\n  ::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n  }\n\n  ::-webkit-scrollbar-track {\n    @apply bg-muted;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    @apply bg-border rounded-full;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    @apply bg-muted-foreground;\n  }\n\n  /* Gradient text utilities */\n  .gradient-text {\n    @apply bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent;\n  }\n\n  /* Custom animations */\n  @keyframes fadeIn {\n    from { opacity: 0; transform: translateY(10px); }\n    to { opacity: 1; transform: translateY(0); }\n  }\n\n  .animate-fade-in {\n    animation: fadeIn 0.3s ease-out;\n  }\n\n  /* Backdrop blur utilities */\n  .backdrop-blur-md {\n    backdrop-filter: blur(12px);\n  }\n\n  /* Custom focus rings */\n  .focus-ring {\n    @apply focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 focus:ring-offset-background;\n  }\n\n  /* Typography improvements */\n  .prose {\n    line-height: 1.7;\n  }\n\n  .prose p {\n    margin-bottom: 1rem;\n  }\n\n  .prose h1, .prose h2, .prose h3, .prose h4 {\n    margin-top: 1.5rem;\n    margin-bottom: 0.5rem;\n    font-weight: 600;\n  }\n\n  .prose ul, .prose ol {\n    margin-bottom: 1rem;\n    padding-left: 1.5rem;\n  }\n\n  .prose li {\n    margin-bottom: 0.25rem;\n  }\n\n  /* Processing steps custom styling */\n  .step-indicator {\n    @apply w-8 h-8 rounded-full flex items-center justify-center text-sm font-semibold;\n  }\n\n  .step-indicator.completed {\n    @apply bg-green-100 text-green-700;\n  }\n\n  .step-indicator.active {\n    @apply bg-primary text-primary-foreground;\n  }\n\n  .step-indicator.pending {\n    @apply bg-muted text-muted-foreground;\n  }\n\n  /* Document preview styling */\n  .document-content {\n    @apply max-w-none prose prose-lg;\n  }\n\n  .document-content h1 {\n    @apply text-3xl font-bold mb-6;\n  }\n\n  .document-content h2 {\n    @apply text-2xl font-semibold mt-8 mb-4 border-b border-border pb-2;\n  }\n\n  .document-content h3 {\n    @apply text-xl font-semibold mt-6 mb-3;\n  }\n\n  .document-content p {\n    @apply mb-4 leading-relaxed;\n  }\n\n  .document-content ul, .document-content ol {\n    @apply mb-4 space-y-1;\n  }\n\n  .document-content li {\n    @apply leading-relaxed;\n  }\n\n  /* Custom button variants */\n  .btn-gradient {\n    @apply bg-gradient-to-r from-primary to-secondary text-primary-foreground;\n  }\n\n  .btn-gradient:hover {\n    @apply opacity-90;\n  }\n\n  /* Loading states */\n  .loading-skeleton {\n    @apply animate-pulse bg-muted rounded;\n  }\n\n  /* Error states */\n  .error-container {\n    @apply border border-destructive/20 bg-destructive/5 rounded-lg p-4;\n  }\n\n  .error-text {\n    @apply text-destructive;\n  }\n\n  /* Success states */\n  .success-container {\n    @apply border border-green-200 bg-green-50 dark:bg-green-900/20 rounded-lg p-4;\n  }\n\n  .success-text {\n    @apply text-green-700 dark:text-green-400;\n  }\n\n  /* Warning states */\n  .warning-container {\n    @apply border border-yellow-200 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg p-4;\n  }\n\n  .warning-text {\n    @apply text-yellow-700 dark:text-yellow-400;\n  }\n\n  /* Info states */\n  .info-container {\n    @apply border border-blue-200 bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4;\n  }\n\n  .info-text {\n    @apply text-blue-700 dark:text-blue-400;\n  }\n}\n\n@layer components {\n  /* Card hover effects */\n  .card-hover {\n    @apply transition-all duration-200 hover:shadow-lg hover:scale-[1.02];\n  }\n\n  /* Input focus effects */\n  .input-focus {\n    @apply transition-all duration-200 focus:ring-2 focus:ring-ring focus:border-transparent;\n  }\n\n  /* Button hover effects */\n  .button-hover {\n    @apply transition-all duration-200 hover:shadow-md active:scale-[0.98];\n  }\n\n  /* Text hover effects */\n  .text-hover {\n    @apply transition-colors duration-200 hover:text-primary cursor-pointer;\n  }\n\n  /* Status indicators */\n  .status-dot {\n    @apply w-2 h-2 rounded-full;\n  }\n\n  .status-dot.online {\n    @apply bg-green-500 animate-pulse;\n  }\n\n  .status-dot.offline {\n    @apply bg-gray-400;\n  }\n\n  .status-dot.processing {\n    @apply bg-yellow-500 animate-pulse;\n  }\n\n  .status-dot.error {\n    @apply bg-red-500;\n  }\n}\n\n@layer utilities {\n  /* Spacing utilities */\n  .space-y-0\\.5 > * + * {\n    margin-top: 0.125rem;\n  }\n\n  /* Custom shadows */\n  .shadow-soft {\n    box-shadow: 0 2px 15px -3px rgba(0, 0, 0, 0.07), 0 10px 20px -2px rgba(0, 0, 0, 0.04);\n  }\n\n  .shadow-medium {\n    box-shadow: 0 4px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  }\n\n  .shadow-strong {\n    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n  }\n\n  /* Custom borders */\n  .border-light {\n    border-color: hsl(var(--border) / 0.5);\n  }\n\n  /* Text truncation */\n  .truncate-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n\n  .truncate-3 {\n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n\n  /* Responsive text sizes */\n  .text-responsive-sm {\n    @apply text-sm md:text-base;\n  }\n\n  .text-responsive-base {\n    @apply text-base md:text-lg;\n  }\n\n  .text-responsive-lg {\n    @apply text-lg md:text-xl;\n  }\n\n  .text-responsive-xl {\n    @apply text-xl md:text-2xl;\n  }\n\n  .text-responsive-2xl {\n    @apply text-2xl md:text-3xl;\n  }\n\n  .text-responsive-3xl {\n    @apply text-3xl md:text-4xl;\n  }\n\n  /* Responsive padding */\n  .p-responsive {\n    @apply p-4 md:p-6 lg:p-8;\n  }\n\n  /* Responsive margins */\n  .m-responsive {\n    @apply m-4 md:m-6 lg:m-8;\n  }\n\n  /* Glass morphism effect */\n  .glass {\n    backdrop-filter: blur(16px) saturate(180%);\n    background-color: rgba(255, 255, 255, 0.75);\n    border: 1px solid rgba(209, 213, 219, 0.3);\n  }\n\n  .glass-dark {\n    backdrop-filter: blur(16px) saturate(180%);\n    background-color: rgba(0, 0, 0, 0.75);\n    border: 1px solid rgba(75, 85, 99, 0.3);\n  }\n}\n","size_bytes":10452},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/jobs/videoProcessor.ts":{"content":"import { storage } from '../storage';\nimport { websocketService } from '../services/websocketService';\nimport * as youtubeService from '../services/youtubeService';\nimport * as aiService from '../services/aiService';\nimport * as documentService from '../services/documentService';\nimport type { DocumentType } from '@shared/schema';\n\ninterface ProcessingJobData {\n  youtubeUrl: string;\n  documentType: DocumentType;\n  userId: string;\n  documentId: number;\n  jobId: number;\n  userPlan: string;\n}\n\ninterface ProcessingResult {\n  success: boolean;\n  documentId: number;\n  filePath?: string;\n  fileSize?: number;\n  error?: string;\n}\n\n/**\n * Main video processing function\n * Orchestrates the entire pipeline from video to document\n */\nexport async function processVideo(data: ProcessingJobData): Promise<ProcessingResult> {\n  const { youtubeUrl, documentType, userId, documentId, jobId } = data;\n  \n  try {\n    // 1. Extract video ID and validate\n    await updateJobProgress(jobId, 10, 'Analyzing YouTube video...');\n    const videoId = youtubeService.extractVideoId(youtubeUrl);\n    const videoInfo = await youtubeService.getVideoInfo(videoId);\n    \n    // Check if user has sufficient hours\n    const durationHours = videoInfo.duration / 3600;\n    const user = await storage.getUser(userId);\n    \n    if (!user) {\n      throw new Error('User not found');\n    }\n    \n    if (user.hoursUsed + durationHours > user.hoursLimit) {\n      throw new Error('Hour limit exceeded for your current plan');\n    }\n    \n    // 2. Extract transcript\n    await updateJobProgress(jobId, 30, 'Extracting video captions...');\n    const transcript = await youtubeService.extractTranscript(videoId);\n    const fullText = youtubeService.transcriptToText(transcript);\n    \n    if (fullText.length < 100) {\n      throw new Error('Video too short or insufficient content to process');\n    }\n    \n    // 3. Process with AI\n    await updateJobProgress(jobId, 60, 'Structuring content with AI...');\n    const structuredContent = await aiService.structureContent(fullText, documentType);\n    \n    // 4. Generate document\n    await updateJobProgress(jobId, 80, 'Generating document...');\n    const document = await documentService.generateDocument(structuredContent, documentType);\n    \n    // 5. Save document\n    await updateJobProgress(jobId, 90, 'Saving document...');\n    const fileName = `document_${documentId}_${Date.now()}.html`;\n    const filePath = await documentService.saveDocument(document.content, fileName);\n    \n    // 6. Update database\n    await storage.updateDocument(documentId, {\n      content: structuredContent,\n      status: 'COMPLETED',\n      videoTitle: structuredContent.title,\n      videoDuration: videoInfo.duration,\n      filePath\n    });\n    \n    // Update user's hours used\n    await storage.upsertUser({\n      ...user,\n      hoursUsed: user.hoursUsed + durationHours\n    });\n    \n    // 7. Complete job\n    await updateJobProgress(jobId, 100, 'Document created successfully!');\n    \n    return {\n      success: true,\n      documentId,\n      filePath,\n      fileSize: document.size\n    };\n    \n  } catch (error: any) {\n    console.error('Processing error:', error);\n    \n    // Update document as failed\n    await storage.updateDocument(documentId, { status: 'FAILED' });\n    \n    // Update job as failed\n    await updateJobProgress(jobId, 0, 'Processing failed', error.message);\n    \n    return {\n      success: false,\n      documentId,\n      error: error.message\n    };\n  }\n}\n\n/**\n * Updates job progress in database and broadcasts to WebSocket subscribers\n */\nasync function updateJobProgress(\n  jobId: number, \n  progress: number, \n  currentStep: string, \n  error?: string\n): Promise<void> {\n  try {\n    const status = error ? 'FAILED' : (progress === 100 ? 'COMPLETED' : 'PROCESSING');\n    \n    await storage.updateJob(jobId, {\n      progress,\n      currentStep,\n      errorMessage: error || null,\n      status: status as any\n    });\n    \n    // Broadcast progress update to WebSocket subscribers\n    websocketService.broadcastProgress(jobId, {\n      type: 'progress',\n      jobId,\n      status,\n      progress,\n      currentStep,\n      errorMessage: error || null\n    });\n    \n    console.log(`Progress update for job ${jobId}: ${progress}% - ${currentStep}`);\n    \n  } catch (updateError) {\n    console.error('Error updating job progress:', updateError);\n  }\n}\n\n/**\n * Simulates adding job to processing queue\n * In production, this would use Redis/Bull for job queuing\n */\nexport async function addVideoProcessingJob(data: ProcessingJobData): Promise<void> {\n  // Simulate async processing\n  setTimeout(async () => {\n    await processVideo(data);\n  }, 1000);\n}\n\n/**\n * Gets processing queue statistics\n */\nexport async function getQueueStats(): Promise<{\n  waiting: number;\n  active: number;\n  completed: number;\n  failed: number;\n}> {\n  // In production, this would query the actual job queue\n  return {\n    waiting: 0,\n    active: 1,\n    completed: 24,\n    failed: 1\n  };\n}\n","size_bytes":4984},"server/middleware/auth.ts":{"content":"import type { Request, Response, NextFunction } from 'express';\n\nexport interface AuthenticatedRequest extends Request {\n  user?: {\n    claims: {\n      sub: string;\n      email?: string;\n      first_name?: string;\n      last_name?: string;\n      profile_image_url?: string;\n    };\n    expires_at: number;\n  };\n}\n\n/**\n * Middleware to check if user is authenticated\n * This would be implemented by the Replit Auth blueprint\n */\nexport function requireAuth(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  if (!req.user || !req.user.claims) {\n    return res.status(401).json({ message: 'Unauthorized' });\n  }\n  \n  // Check if token is expired\n  const now = Math.floor(Date.now() / 1000);\n  if (req.user.expires_at && now > req.user.expires_at) {\n    return res.status(401).json({ message: 'Token expired' });\n  }\n  \n  next();\n}\n\n/**\n * Middleware to extract user information for optional authentication\n */\nexport function optionalAuth(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  // Set user if available, but don't require it\n  next();\n}\n","size_bytes":1076},"server/services/aiService.ts":{"content":"import OpenAI from \"openai\";\nimport type { DocumentType } from \"@shared/schema\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\"\n});\n\n/**\n * Document type specific prompts optimized for structured content generation\n */\nconst DOCUMENT_PROMPTS = {\n  EBOOK: `You are an expert in creating professional ebooks. Analyze this video transcript and transform it into a well-structured ebook.\n\nReturn a JSON with this EXACT structure:\n{\n  \"title\": \"Main ebook title\",\n  \"subtitle\": \"Descriptive subtitle\",\n  \"introduction\": \"Engaging 2-3 paragraph introduction\",\n  \"chapters\": [\n    {\n      \"title\": \"Chapter title\",\n      \"content\": \"Chapter content in paragraphs\"\n    }\n  ],\n  \"conclusion\": \"2-3 paragraph conclusion\",\n  \"keyTakeaways\": [\"Important point 1\", \"Important point 2\"]\n}`,\n\n  TUTORIAL: `You are an expert in creating step-by-step tutorials. Analyze this transcript and transform it into a practical tutorial.\n\nReturn a JSON with this EXACT structure:\n{\n  \"title\": \"Tutorial title\",\n  \"description\": \"Description of what will be taught\",\n  \"materials\": [\"Material 1\", \"Material 2\"],\n  \"steps\": [\n    {\n      \"stepNumber\": 1,\n      \"title\": \"Step name\",\n      \"content\": \"Detailed instructions\",\n      \"tips\": \"Extra tips (optional)\"\n    }\n  ],\n  \"troubleshooting\": \"Solutions for common problems\",\n  \"finalTips\": \"Final tips\"\n}`,\n\n  GUIDE: `You are an expert in creating practical guides. Analyze this transcript and transform it into an organized guide.\n\nReturn a JSON with this EXACT structure:\n{\n  \"title\": \"Guide title\",\n  \"overview\": \"Guide overview\",\n  \"sections\": [\n    {\n      \"title\": \"Section title\",\n      \"content\": \"Section content\"\n    }\n  ],\n  \"checklist\": [\"Checklist item 1\", \"Item 2\"],\n  \"resources\": \"Additional resources\"\n}`,\n\n  RECIPE: `You are an expert in creating recipe guides. Analyze this transcript and transform it into a structured recipe.\n\nReturn a JSON with this EXACT structure:\n{\n  \"title\": \"Recipe title\",\n  \"description\": \"Recipe description\",\n  \"ingredients\": [\"Ingredient 1\", \"Ingredient 2\"],\n  \"instructions\": [\n    {\n      \"step\": 1,\n      \"instruction\": \"Step instruction\"\n    }\n  ],\n  \"prepTime\": \"Preparation time\",\n  \"cookTime\": \"Cooking time\",\n  \"servings\": \"Number of servings\"\n}`,\n\n  PRESENTATION: `You are an expert in creating presentations. Analyze this transcript and transform it into a structured presentation.\n\nReturn a JSON with this EXACT structure:\n{\n  \"title\": \"Presentation title\",\n  \"subtitle\": \"Presentation subtitle\",\n  \"slides\": [\n    {\n      \"slideNumber\": 1,\n      \"title\": \"Slide title\",\n      \"content\": \"Slide content\",\n      \"notes\": \"Speaker notes\"\n    }\n  ]\n}`,\n\n  SUMMARY: `You are an expert in creating comprehensive summaries. Analyze this transcript and create a structured summary.\n\nReturn a JSON with this EXACT structure:\n{\n  \"title\": \"Summary title\",\n  \"overview\": \"Brief overview\",\n  \"mainPoints\": [\"Main point 1\", \"Main point 2\"],\n  \"details\": [\n    {\n      \"topic\": \"Topic name\",\n      \"summary\": \"Topic summary\"\n    }\n  ],\n  \"conclusion\": \"Summary conclusion\"\n}`\n};\n\n/**\n * Processes text with AI to generate structured content\n * Uses GPT-5 for cost-optimized processing\n */\nexport async function structureContent(text: string, documentType: DocumentType): Promise<any> {\n  const prompt = DOCUMENT_PROMPTS[documentType];\n  \n  if (!prompt) {\n    throw new Error(`Document type not supported: ${documentType}`);\n  }\n  \n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-5\", // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n      messages: [\n        {\n          role: \"system\",\n          content: prompt\n        },\n        {\n          role: \"user\",\n          content: `Video transcript:\\n\\n${text}\\n\\nIMPORTANT: Return ONLY the JSON, no additional text.`\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.7,\n      max_completion_tokens: 4000\n    });\n    \n    const responseText = completion.choices[0].message.content?.trim();\n    \n    if (!responseText) {\n      throw new Error('AI did not return valid content');\n    }\n    \n    try {\n      return JSON.parse(responseText);\n    } catch (parseError) {\n      // Try to extract JSON from response if wrapped in text\n      const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/);\n      if (!jsonMatch) {\n        throw new Error('AI did not return valid JSON');\n      }\n      return JSON.parse(jsonMatch[0]);\n    }\n  } catch (error: any) {\n    if (error instanceof SyntaxError) {\n      throw new Error('Error processing AI response. Please try again.');\n    }\n    throw new Error(`AI processing failed: ${error.message}`);\n  }\n}\n\n/**\n * Generates intelligent title based on content\n * Used when video doesn't have a clear title\n */\nexport async function generateTitle(text: string, documentType: DocumentType): Promise<string> {\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-5\", // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n      messages: [\n        {\n          role: \"system\",\n          content: `Generate an attractive and professional title for a ${documentType.toLowerCase()} based on this content. Return only the title, without quotes or extra formatting.`\n        },\n        {\n          role: \"user\",\n          content: text.substring(0, 1000) // First 1000 characters\n        }\n      ],\n      temperature: 0.8,\n      max_completion_tokens: 100\n    });\n    \n    return completion.choices[0].message.content?.trim() || `${documentType} Document`;\n  } catch (error) {\n    return `${documentType} Document`; // Fallback title\n  }\n}\n\nexport { DOCUMENT_PROMPTS };\n","size_bytes":5985},"server/services/documentService.ts":{"content":"import fs from 'fs/promises';\nimport path from 'path';\nimport type { DocumentType } from \"@shared/schema\";\n\n/**\n * Loads HTML template for the specified document type\n */\nexport async function loadTemplate(documentType: DocumentType): Promise<string> {\n  try {\n    const templatePath = path.join(__dirname, '../templates', `${documentType.toLowerCase()}.html`);\n    return await fs.readFile(templatePath, 'utf8');\n  } catch (error) {\n    throw new Error(`Template not found for document type: ${documentType}`);\n  }\n}\n\n/**\n * Processes HTML template by replacing placeholders with actual data\n * Uses {{variable}} syntax for substitutions\n */\nexport function processTemplate(templateHtml: string, data: any): string {\n  let processedHtml = templateHtml;\n  \n  // Basic substitutions\n  processedHtml = processedHtml.replace(/\\{\\{title\\}\\}/g, data.title || 'Untitled Document');\n  processedHtml = processedHtml.replace(/\\{\\{subtitle\\}\\}/g, data.subtitle || '');\n  \n  // Document type specific processing\n  if (data.chapters) {\n    // Ebook processing\n    const chaptersHtml = data.chapters.map((chapter: any, index: number) => `\n      <div class=\"chapter\">\n        <h2>Chapter ${index + 1}: ${chapter.title}</h2>\n        <div class=\"chapter-content\">${chapter.content.replace(/\\n/g, '</p><p>')}</div>\n      </div>\n    `).join('');\n    processedHtml = processedHtml.replace(/\\{\\{chapters\\}\\}/g, chaptersHtml);\n    \n    processedHtml = processedHtml.replace(/\\{\\{introduction\\}\\}/g, data.introduction || '');\n    processedHtml = processedHtml.replace(/\\{\\{conclusion\\}\\}/g, data.conclusion || '');\n    \n    if (data.keyTakeaways) {\n      const takeawaysHtml = data.keyTakeaways.map((item: string) => `<li>${item}</li>`).join('');\n      processedHtml = processedHtml.replace(/\\{\\{keyTakeaways\\}\\}/g, `<ul>${takeawaysHtml}</ul>`);\n    }\n  }\n  \n  if (data.steps) {\n    // Tutorial processing\n    const stepsHtml = data.steps.map((step: any) => `\n      <div class=\"step\">\n        <h3>Step ${step.stepNumber}: ${step.title}</h3>\n        <div class=\"step-content\">${step.content}</div>\n        ${step.tips ? `<div class=\"step-tips\"><strong>Tip:</strong> ${step.tips}</div>` : ''}\n      </div>\n    `).join('');\n    processedHtml = processedHtml.replace(/\\{\\{steps\\}\\}/g, stepsHtml);\n    \n    if (data.materials) {\n      const materialsHtml = data.materials.map((item: string) => `<li>${item}</li>`).join('');\n      processedHtml = processedHtml.replace(/\\{\\{materials\\}\\}/g, `<ul>${materialsHtml}</ul>`);\n    }\n  }\n  \n  if (data.sections) {\n    // Guide processing\n    const sectionsHtml = data.sections.map((section: any) => `\n      <div class=\"section\">\n        <h2>${section.title}</h2>\n        <div class=\"section-content\">${section.content.replace(/\\n/g, '</p><p>')}</div>\n      </div>\n    `).join('');\n    processedHtml = processedHtml.replace(/\\{\\{sections\\}\\}/g, sectionsHtml);\n  }\n  \n  if (data.ingredients && data.instructions) {\n    // Recipe processing\n    const ingredientsHtml = data.ingredients.map((item: string) => `<li>${item}</li>`).join('');\n    processedHtml = processedHtml.replace(/\\{\\{ingredients\\}\\}/g, `<ul>${ingredientsHtml}</ul>`);\n    \n    const instructionsHtml = data.instructions.map((instruction: any) => `\n      <div class=\"instruction-step\">\n        <h4>Step ${instruction.step}</h4>\n        <p>${instruction.instruction}</p>\n      </div>\n    `).join('');\n    processedHtml = processedHtml.replace(/\\{\\{instructions\\}\\}/g, instructionsHtml);\n  }\n  \n  if (data.slides) {\n    // Presentation processing\n    const slidesHtml = data.slides.map((slide: any) => `\n      <div class=\"slide\">\n        <div class=\"slide-number\">Slide ${slide.slideNumber}</div>\n        <h2 class=\"slide-title\">${slide.title}</h2>\n        <div class=\"slide-content\">${slide.content.replace(/\\n/g, '</p><p>')}</div>\n        ${slide.notes ? `\n          <div class=\"speaker-notes\">\n            <div class=\"speaker-notes-label\">Speaker Notes</div>\n            <div class=\"speaker-notes-content\">${slide.notes}</div>\n          </div>` : ''}\n      </div>\n    `).join('');\n    processedHtml = processedHtml.replace(/\\{\\{slides\\}\\}/g, slidesHtml);\n  }\n  \n  if (data.mainPoints) {\n    // Summary processing\n    const mainPointsHtml = data.mainPoints.map((point: string) => `<li>${point}</li>`).join('');\n    processedHtml = processedHtml.replace(/\\{\\{mainPoints\\}\\}/g, `<ul>${mainPointsHtml}</ul>`);\n    \n    processedHtml = processedHtml.replace(/\\{\\{overview\\}\\}/g, data.overview || '');\n    processedHtml = processedHtml.replace(/\\{\\{conclusion\\}\\}/g, data.conclusion || '');\n    \n    if (data.details) {\n      const detailsHtml = data.details.map((detail: any) => `\n        <div class=\"detail-item\">\n          <h3 class=\"detail-topic\">${detail.topic}</h3>\n          <div class=\"detail-summary\">${detail.summary}</div>\n        </div>\n      `).join('');\n      processedHtml = processedHtml.replace(/\\{\\{details\\}\\}/g, detailsHtml);\n    }\n  }\n  \n  return processedHtml;\n}\n\n/**\n * Generates a complete document from structured data\n * Returns HTML content for now (PDF generation would require additional setup)\n */\nexport async function generateDocument(structuredData: any, documentType: DocumentType): Promise<{\n  success: boolean;\n  content: string;\n  size: number;\n}> {\n  try {\n    // 1. Load appropriate template\n    const templateHtml = await loadTemplate(documentType);\n    \n    // 2. Process template with data\n    const processedHtml = processTemplate(templateHtml, structuredData);\n    \n    return {\n      success: true,\n      content: processedHtml,\n      size: processedHtml.length\n    };\n  } catch (error: any) {\n    throw new Error(`Error generating document: ${error.message}`);\n  }\n}\n\n/**\n * Saves document content to file system\n */\nexport async function saveDocument(content: string, filename: string): Promise<string> {\n  try {\n    const uploadsDir = process.env.UPLOADS_DIR || './uploads';\n    await fs.mkdir(uploadsDir, { recursive: true });\n    \n    const filePath = path.join(uploadsDir, filename);\n    await fs.writeFile(filePath, content, 'utf8');\n    \n    return filePath;\n  } catch (error: any) {\n    throw new Error(`Error saving document: ${error.message}`);\n  }\n}\n","size_bytes":6181},"server/services/youtubeService.ts":{"content":"interface TranscriptItem {\n  text: string;\n  offset: number;\n  duration: number;\n}\n\ninterface VideoInfo {\n  videoId: string;\n  duration: number;\n  thumbnail: string;\n  transcriptLength: number;\n}\n\n/**\n * Extracts the video ID from YouTube URLs\n * Supports formats: youtube.com/watch?v=ID, youtu.be/ID, m.youtube.com/watch?v=ID\n */\nexport function extractVideoId(url: string): string {\n  const regex = /(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|m\\.youtube\\.com\\/watch\\?v=)([^&\\n?#]+)/;\n  const match = url.match(regex);\n  \n  if (!match) {\n    throw new Error('Invalid YouTube URL format');\n  }\n  \n  return match[1];\n}\n\n/**\n * Gets basic video information including duration estimate\n * Note: This is a simplified implementation for demo purposes\n * In production, you would use youtube-transcript package or YouTube Data API\n */\nexport async function getVideoInfo(videoId: string): Promise<VideoInfo> {\n  try {\n    // Simulate video info retrieval\n    // In production, use youtube-transcript or YouTube Data API\n    const estimatedDuration = 2700; // 45 minutes in seconds\n    \n    return {\n      videoId,\n      duration: estimatedDuration,\n      thumbnail: `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`,\n      transcriptLength: 150 // estimated number of transcript segments\n    };\n  } catch (error) {\n    throw new Error('Unable to access video. Please check if it is public and has captions available.');\n  }\n}\n\n/**\n * Extracts transcript from YouTube video\n * Note: This is a simplified implementation for demo purposes\n * In production, you would use the youtube-transcript package\n */\nexport async function extractTranscript(videoId: string): Promise<TranscriptItem[]> {\n  try {\n    // Simulate transcript extraction\n    // In production, use youtube-transcript package\n    const mockTranscript: TranscriptItem[] = [\n      {\n        text: \"Welcome to this comprehensive guide on React Hooks. In this video, we'll explore everything you need to know about using hooks in your React applications.\",\n        offset: 0,\n        duration: 5.5\n      },\n      {\n        text: \"React Hooks were introduced in React 16.8 and have revolutionized how we write React components. They allow us to use state and other React features in functional components.\",\n        offset: 5.5,\n        duration: 7.2\n      },\n      {\n        text: \"Let's start with the most basic hook - useState. The useState hook allows you to add state to functional components.\",\n        offset: 12.7,\n        duration: 6.1\n      },\n      // Continue with more realistic transcript content...\n    ];\n    \n    return mockTranscript;\n  } catch (error) {\n    throw new Error('Could not extract transcript from this video');\n  }\n}\n\n/**\n * Converts transcript array to continuous text\n * Removes music markers, applause, etc.\n */\nexport function transcriptToText(transcript: TranscriptItem[]): string {\n  return transcript\n    .map(item => item.text)\n    .join(' ')\n    .replace(/\\[Music\\]/gi, '')\n    .replace(/\\[Applause\\]/gi, '')\n    .replace(/\\[Laughter\\]/gi, '')\n    .replace(/\\[Silence\\]/gi, '')\n    .replace(/\\s+/g, ' ')\n    .trim();\n}\n\n/**\n * Formats duration from seconds to human-readable format\n */\nexport function formatDuration(seconds: number): string {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = seconds % 60;\n  \n  if (hours > 0) {\n    return `${hours}h ${minutes}m ${secs}s`;\n  } else if (minutes > 0) {\n    return `${minutes}m ${secs}s`;\n  } else {\n    return `${secs}s`;\n  }\n}\n","size_bytes":3535},"client/src/components/Features.tsx":{"content":"import { Bot, Clock, FileText } from \"lucide-react\";\n\nexport default function Features() {\n  const features = [\n    {\n      icon: Bot,\n      title: \"AI-Powered Processing\",\n      description: \"Advanced AI structures your video content into professional, readable documents with proper formatting.\",\n      color: \"primary\"\n    },\n    {\n      icon: Clock,\n      title: \"Real-time Progress\",\n      description: \"Track your document generation in real-time with detailed progress updates and status notifications.\",\n      color: \"secondary\"\n    },\n    {\n      icon: FileText,\n      title: \"Multiple Formats\",\n      description: \"Generate ebooks, tutorials, guides, recipes, and more with customizable templates and styling.\",\n      color: \"accent\"\n    }\n  ];\n\n  return (\n    <section className=\"py-20 bg-muted/30\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center space-y-4 mb-16\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-foreground\">Powerful Features</h2>\n          <p className=\"text-xl text-muted-foreground\">Everything you need to transform video content into professional documents</p>\n        </div>\n        \n        <div className=\"grid md:grid-cols-3 gap-8\">\n          {features.map((feature, index) => (\n            <div \n              key={index}\n              className=\"bg-card border border-border rounded-xl p-8 space-y-4\"\n              data-testid={`feature-${index}`}\n            >\n              <div className={`w-12 h-12 bg-${feature.color}/10 rounded-lg flex items-center justify-center`}>\n                <feature.icon className={`text-${feature.color} text-xl`} />\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground\">{feature.title}</h3>\n              <p className=\"text-muted-foreground\">{feature.description}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1923},"client/src/components/Header.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { FileText, Clock } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Header() {\n  const { user, isAuthenticated } = useAuth();\n\n  return (\n    <header className=\"bg-background/80 backdrop-blur-md border-b border-border sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <Link href=\"/\" className=\"flex items-center space-x-3\" data-testid=\"link-home\">\n            <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center\">\n              <FileText className=\"text-primary-foreground text-lg\" />\n            </div>\n            <span className=\"text-xl font-bold text-foreground\">VideoScribe</span>\n          </Link>\n          \n          {isAuthenticated ? (\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                <Clock className=\"h-4 w-4\" />\n                <span data-testid=\"text-hours-used\">\n                  {(user as any)?.hoursUsed?.toFixed(1) || 0} / {(user as any)?.hoursLimit || 0.5} min used\n                </span>\n              </div>\n              <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                <span className=\"text-primary-foreground text-sm font-medium\" data-testid=\"text-user-initials\">\n                  {(user as any)?.firstName ? (user as any).firstName.charAt(0) : 'U'}\n                  {(user as any)?.lastName ? (user as any).lastName.charAt(0) : ''}\n                </span>\n              </div>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => {\n                  // Navigate directly to logout endpoint which will redirect\n                  window.location.href = '/api/logout';\n                }}\n                data-testid=\"button-logout\"\n              >\n                Logout\n              </Button>\n            </div>\n          ) : (\n            <div className=\"flex items-center space-x-3\">\n              <Button \n                variant=\"ghost\" \n                onClick={() => window.location.href = '/api/login'}\n                data-testid=\"button-signin\"\n              >\n                Sign In\n              </Button>\n              <Button \n                onClick={() => window.location.href = '/api/login'}\n                data-testid=\"button-getstarted\"\n              >\n                Get Started\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2759},"client/src/components/Hero.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Play, Video, Check, Link as LinkIcon, FileText } from \"lucide-react\";\n\nexport default function Hero() {\n  return (\n    <section className=\"relative overflow-hidden bg-gradient-to-br from-background via-muted/30 to-accent/10 py-20\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n          <div className=\"space-y-8\">\n            <div className=\"space-y-4\">\n              <h1 className=\"text-4xl md:text-6xl font-bold text-foreground leading-tight\">\n                Transform YouTube Videos into \n                <span className=\"bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n                  {\" \"}Professional Documents\n                </span>\n              </h1>\n              <p className=\"text-xl text-muted-foreground leading-relaxed\">\n                Convert any YouTube video into beautifully formatted ebooks, tutorials, guides, and recipes using AI-powered content structuring.\n              </p>\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <Button \n                size=\"lg\" \n                className=\"text-lg font-semibold\"\n                onClick={() => window.location.href = '/api/login'}\n                data-testid=\"button-start-converting\"\n              >\n                <Play className=\"mr-2 h-5 w-5\" />\n                Start Converting\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"lg\" \n                className=\"text-lg font-semibold\"\n                data-testid=\"button-watch-demo\"\n              >\n                <Video className=\"mr-2 h-5 w-5\" />\n                Watch Demo\n              </Button>\n            </div>\n            \n            <div className=\"flex items-center space-x-6 text-sm text-muted-foreground\">\n              <div className=\"flex items-center space-x-2\">\n                <Check className=\"h-4 w-4 text-green-500\" />\n                <span>No Credit Card Required</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Check className=\"h-4 w-4 text-green-500\" />\n                <span>Free 30 Minutes</span>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"relative\">\n            {/* Modern YouTube to Document Animation Mockup */}\n            <div className=\"bg-card border border-border rounded-2xl p-8 shadow-2xl\">\n              <div className=\"space-y-6\">\n                {/* YouTube URL Input */}\n                <div className=\"space-y-3\">\n                  <label className=\"text-sm font-medium text-foreground\">YouTube URL</label>\n                  <div className=\"relative\">\n                    <Input \n                      type=\"url\" \n                      placeholder=\"https://youtube.com/watch?v=...\" \n                      className=\"pr-12\"\n                      data-testid=\"input-youtube-url\"\n                    />\n                    <LinkIcon className=\"absolute right-3 top-3 h-4 w-4 text-muted-foreground\" />\n                  </div>\n                </div>\n                \n                {/* Document Type Selection */}\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <button \n                    className=\"p-3 border border-border rounded-lg hover:border-primary hover:bg-primary/5 transition-colors text-center\"\n                    data-testid=\"button-type-ebook\"\n                  >\n                    <FileText className=\"h-6 w-6 text-primary mb-2 mx-auto\" />\n                    <span className=\"text-sm font-medium\">E-book</span>\n                  </button>\n                  <button \n                    className=\"p-3 border border-border rounded-lg hover:border-primary hover:bg-primary/5 transition-colors text-center\"\n                    data-testid=\"button-type-tutorial\"\n                  >\n                    <div className=\"h-6 w-6 text-secondary mb-2 mx-auto\">\n                      <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                        <path d=\"M3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm4 4h14v-2H7v2zm0 4h14v-2H7v2zM7 7v2h14V7H7z\"/>\n                      </svg>\n                    </div>\n                    <span className=\"text-sm font-medium\">Tutorial</span>\n                  </button>\n                </div>\n                \n                {/* Convert Button */}\n                <Button \n                  className=\"w-full py-3 font-semibold bg-gradient-to-r from-primary to-secondary\"\n                  data-testid=\"button-convert\"\n                >\n                  Convert to Document\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4898},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/hooks/useSocket.ts":{"content":"import { useEffect, useState, useRef, useCallback } from 'react';\n\ninterface ProgressUpdate {\n  type: 'progress';\n  jobId: number;\n  status: string;\n  progress: number;\n  currentStep: string;\n  errorMessage?: string | null;\n}\n\ninterface SocketMessage {\n  type: string;\n  [key: string]: any;\n}\n\nexport function useSocket() {\n  const [socket, setSocket] = useState<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionState, setConnectionState] = useState<'disconnected' | 'connecting' | 'connected' | 'authenticated'>('disconnected');\n  const [lastMessage, setLastMessage] = useState<SocketMessage | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\n  const reconnectAttemptsRef = useRef(0);\n  const maxReconnectAttempts = 5;\n  const messageHandlersRef = useRef<Map<string, (message: SocketMessage) => void>>(new Map());\n  const pendingSubscriptionsRef = useRef<Set<number>>(new Set());\n  const activeSubscriptionsRef = useRef<Set<number>>(new Set());\n  const connectionReadyRef = useRef(false);\n  const subscriptionReadyTimeoutRef = useRef<NodeJS.Timeout>();\n\n  useEffect(() => {\n    const connect = () => {\n      try {\n        setConnectionState('connecting');\n        // Use correct protocol and path for WebSocket connection\n        const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n        const wsUrl = `${protocol}//${window.location.host}/ws`;\n        \n        const ws = new WebSocket(wsUrl);\n        \n        ws.onopen = () => {\n          console.log('WebSocket connected, waiting for authentication...');\n          setConnectionState('connected');\n          setIsConnected(true);\n          setSocket(ws);\n          reconnectAttemptsRef.current = 0;\n          \n          // Clear any existing subscription ready timeout\n          if (subscriptionReadyTimeoutRef.current) {\n            clearTimeout(subscriptionReadyTimeoutRef.current);\n          }\n          \n          // Wait a short time for authentication to complete before processing subscriptions\n          // This prevents the race condition where subscriptions are sent before auth is complete\n          subscriptionReadyTimeoutRef.current = setTimeout(() => {\n            connectionReadyRef.current = true;\n            setConnectionState('authenticated');\n            \n            // Process any pending subscriptions after authentication is ready\n            const pendingSubs = Array.from(pendingSubscriptionsRef.current);\n            const activeSubs = Array.from(activeSubscriptionsRef.current);\n            \n            // Re-subscribe to all active subscriptions on reconnect\n            const allSubs = new Set([...pendingSubs, ...activeSubs]);\n            pendingSubscriptionsRef.current.clear();\n            \n            allSubs.forEach(jobId => {\n              console.log('Processing subscription for job:', jobId, 'after authentication ready');\n              try {\n                ws.send(JSON.stringify({\n                  type: 'subscribe',\n                  jobId\n                }));\n              } catch (error) {\n                console.error('Error sending subscription:', error);\n                pendingSubscriptionsRef.current.add(jobId);\n              }\n            });\n          }, 200); // Small delay to ensure authentication is complete\n        };\n\n        ws.onmessage = (event) => {\n          try {\n            const message: SocketMessage = JSON.parse(event.data);\n            console.log('WebSocket message received:', message);\n            \n            setLastMessage(message);\n            \n            // Handle subscription confirmations\n            if (message.type === 'subscribed' && message.jobId) {\n              activeSubscriptionsRef.current.add(message.jobId);\n              pendingSubscriptionsRef.current.delete(message.jobId);\n              console.log('Subscription confirmed for job:', message.jobId);\n            }\n            \n            // Handle authentication/connection state changes\n            if (message.type === 'error' && message.message?.includes('Authentication')) {\n              setConnectionState('disconnected');\n              connectionReadyRef.current = false;\n            }\n            \n            // Call registered message handlers\n            const handler = messageHandlersRef.current.get(message.type);\n            if (handler) {\n              handler(message);\n            }\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n          }\n        };\n        \n        ws.onclose = (event) => {\n          console.log('WebSocket disconnected:', event.code, event.reason);\n          setIsConnected(false);\n          setSocket(null);\n          connectionReadyRef.current = false;\n          setConnectionState('disconnected');\n          \n          // Clear subscription ready timeout\n          if (subscriptionReadyTimeoutRef.current) {\n            clearTimeout(subscriptionReadyTimeoutRef.current);\n          }\n          \n          // Move active subscriptions back to pending for re-subscription on reconnect\n          const activeSubs = Array.from(activeSubscriptionsRef.current);\n          activeSubs.forEach(jobId => {\n            pendingSubscriptionsRef.current.add(jobId);\n          });\n          activeSubscriptionsRef.current.clear();\n          \n          // Attempt to reconnect if not a normal closure\n          if (event.code !== 1000 && reconnectAttemptsRef.current < maxReconnectAttempts) {\n            reconnectAttemptsRef.current++;\n            const delay = Math.min(1000 * Math.pow(2, reconnectAttemptsRef.current), 30000);\n            \n            console.log(`Attempting to reconnect in ${delay}ms (attempt ${reconnectAttemptsRef.current})`);\n            \n            reconnectTimeoutRef.current = setTimeout(() => {\n              connect();\n            }, delay);\n          }\n        };\n        \n        ws.onerror = (error) => {\n          console.error('WebSocket error:', error);\n        };\n        \n        return ws;\n      } catch (error) {\n        console.error('Failed to create WebSocket connection:', error);\n        return null;\n      }\n    };\n\n    const ws = connect();\n\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      \n      if (subscriptionReadyTimeoutRef.current) {\n        clearTimeout(subscriptionReadyTimeoutRef.current);\n      }\n      \n      if (ws && ws.readyState === WebSocket.OPEN) {\n        ws.close(1000, 'Component unmounting');\n      }\n    };\n  }, []);\n\n  // Helper function to send messages safely\n  const sendMessage = useCallback((message: string | object) => {\n    if (socket && socket.readyState === WebSocket.OPEN && connectionReadyRef.current) {\n      const messageStr = typeof message === 'string' ? message : JSON.stringify(message);\n      socket.send(messageStr);\n      return true;\n    }\n    return false;\n  }, [socket]);\n\n  // Helper function to subscribe to job updates with retry logic\n  const subscribeToJob = useCallback((jobId: number) => {\n    // Always add to active subscriptions to maintain state across reconnects\n    activeSubscriptionsRef.current.add(jobId);\n    \n    if (socket && socket.readyState === WebSocket.OPEN && connectionReadyRef.current && connectionState === 'authenticated') {\n      // Socket is ready, send subscription immediately\n      const success = sendMessage({\n        type: 'subscribe',\n        jobId\n      });\n      if (success) {\n        console.log('Successfully subscribed to job:', jobId);\n        // Remove from pending if it was there\n        pendingSubscriptionsRef.current.delete(jobId);\n      } else {\n        // If send failed, add to pending\n        pendingSubscriptionsRef.current.add(jobId);\n      }\n      return success;\n    } else {\n      // Socket is not ready, queue the subscription\n      console.log('Socket not ready, queuing subscription for job:', jobId, 'Connection state:', connectionState);\n      pendingSubscriptionsRef.current.add(jobId);\n      return false; // Indicates pending\n    }\n  }, [socket, sendMessage, connectionState]);\n\n  // Helper function to register message handlers\n  const onMessage = useCallback((type: string, handler: (message: SocketMessage) => void) => {\n    messageHandlersRef.current.set(type, handler);\n    \n    // Return cleanup function\n    return () => {\n      messageHandlersRef.current.delete(type);\n    };\n  }, []);\n\n  // Helper function to subscribe to progress updates for a specific job\n  const onProgressUpdate = useCallback((handler: (update: ProgressUpdate) => void) => {\n    return onMessage('progress', (message) => {\n      if (message.type === 'progress') {\n        handler(message as ProgressUpdate);\n      }\n    });\n  }, [onMessage]);\n\n  // Function to check if subscription is pending\n  const isSubscriptionPending = useCallback((jobId: number) => {\n    return pendingSubscriptionsRef.current.has(jobId);\n  }, []);\n  \n  // Function to check if subscription is active\n  const isSubscriptionActive = useCallback((jobId: number) => {\n    return activeSubscriptionsRef.current.has(jobId);\n  }, []);\n  \n  // Function to unsubscribe from a job\n  const unsubscribeFromJob = useCallback((jobId: number) => {\n    activeSubscriptionsRef.current.delete(jobId);\n    pendingSubscriptionsRef.current.delete(jobId);\n    \n    if (socket && socket.readyState === WebSocket.OPEN && connectionReadyRef.current) {\n      sendMessage({\n        type: 'unsubscribe',\n        jobId\n      });\n    }\n  }, [socket, sendMessage]);\n\n  return {\n    socket,\n    isConnected,\n    connectionState,\n    lastMessage,\n    sendMessage,\n    subscribeToJob,\n    unsubscribeFromJob,\n    onMessage,\n    onProgressUpdate,\n    isSubscriptionPending,\n    isSubscriptionActive\n  };\n}\n","size_bytes":9754},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Editor.tsx":{"content":"import { useEffect } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Header from \"@/components/Header\";\nimport DocumentPreview from \"@/components/Editor/DocumentPreview\";\nimport EditorSidebar from \"@/components/Editor/EditorSidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, Save, Download } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Editor() {\n  const { documentId } = useParams();\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: document, isLoading: documentLoading } = useQuery({\n    queryKey: [\"/api/documents\", documentId],\n    enabled: !!documentId && isAuthenticated,\n    retry: false,\n  });\n\n  const handleDownload = async () => {\n    try {\n      const response = await fetch(`/api/documents/${documentId}/download`, {\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Download failed');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = globalThis.document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = `${(document as any)?.videoTitle || 'document'}.html`;\n      globalThis.document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      \n      toast({\n        title: \"Success\",\n        description: \"Document downloaded successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to download document\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (documentLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"flex h-screen\">\n          <div className=\"w-80 bg-card border-r border-border animate-pulse\"></div>\n          <div className=\"flex-1 bg-muted/30 animate-pulse\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!document) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-foreground mb-4\">Document Not Found</h2>\n            <p className=\"text-muted-foreground mb-8\">The document you're looking for doesn't exist or you don't have access to it.</p>\n            <Link href=\"/\">\n              <Button data-testid=\"button-back-home\">Back to Dashboard</Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"bg-card border-b border-border\">\n        <div className=\"max-w-full px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <Link href=\"/\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                </Button>\n              </Link>\n              <span className=\"text-lg font-semibold text-foreground\" data-testid=\"text-document-title\">\n                {(document as any)?.videoTitle || 'Untitled Document'}\n              </span>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-save\">\n                <Save className=\"h-4 w-4 mr-2\" />\n                Save Draft\n              </Button>\n              <Button onClick={handleDownload} size=\"sm\" data-testid=\"button-download\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"flex h-screen\">\n        {/* Editor Sidebar */}\n        <EditorSidebar document={document} />\n        \n        {/* Document Preview */}\n        <DocumentPreview document={document} />\n      </div>\n    </div>\n  );\n}\n","size_bytes":4930},"client/src/pages/Home.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/Header\";\nimport StatsCard from \"@/components/Dashboard/StatsCard\";\nimport DocumentsList from \"@/components/Dashboard/DocumentsList\";\nimport NewDocumentForm from \"@/components/Dashboard/NewDocumentForm\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function Home() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n    retry: false,\n  });\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Dashboard Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <StatsCard\n            title=\"Documents Created\"\n            value={(stats as any)?.documentsCount || 0}\n            icon=\"file-text\"\n            color=\"primary\"\n            data-testid=\"stat-documents\"\n          />\n          <StatsCard\n            title=\"Hours Used\"\n            value={`${(stats as any)?.hoursUsed || 0}h / ${(stats as any)?.hoursLimit || 0.5}h`}\n            icon=\"clock\"\n            color=\"secondary\"\n            data-testid=\"stat-hours\"\n          />\n          <StatsCard\n            title=\"Current Plan\"\n            value={(stats as any)?.plan || 'FREE'}\n            icon=\"user\"\n            color=\"accent\"\n            data-testid=\"stat-plan\"\n          />\n          <StatsCard\n            title=\"Success Rate\"\n            value={`${(stats as any)?.successRate || 0}%`}\n            icon=\"check\"\n            color=\"green\"\n            data-testid=\"stat-success\"\n          />\n        </div>\n\n        {/* New Document Form */}\n        <NewDocumentForm />\n\n        {/* Recent Documents */}\n        <DocumentsList />\n      </div>\n    </div>\n  );\n}\n","size_bytes":2694},"client/src/pages/Landing.tsx":{"content":"import Header from \"@/components/Header\";\nimport Hero from \"@/components/Hero\";\nimport Features from \"@/components/Features\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <Hero />\n      <Features />\n    </div>\n  );\n}\n","size_bytes":292},"client/src/pages/Processing.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useSocket } from \"@/hooks/useSocket\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Header from \"@/components/Header\";\nimport VideoInfo from \"@/components/Processing/VideoInfo\";\nimport ProgressBar from \"@/components/Processing/ProgressBar\";\nimport ProcessingSteps from \"@/components/Processing/ProcessingSteps\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Processing() {\n  const { jobId } = useParams();\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const { isConnected, connectionState, subscribeToJob, onProgressUpdate, isSubscriptionPending, isSubscriptionActive } = useSocket();\n  const queryClient = useQueryClient();\n  const [realtimeProgress, setRealtimeProgress] = useState<any>(null);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: jobData, isLoading: jobLoading, refetch } = useQuery<any>({\n    queryKey: [\"/api/jobs\", jobId, \"progress\"],\n    enabled: !!jobId && isAuthenticated,\n    refetchInterval: (query) => (query.state.data?.status === 'PROCESSING' ? 2000 : false),\n    retry: false,\n  });\n\n  // WebSocket for real-time updates - register message handler first\n  useEffect(() => {\n    if (!jobId) return;\n\n    // Register progress update handler first\n    const unsubscribeProgressHandler = onProgressUpdate((update) => {\n      if (update.jobId === parseInt(jobId!)) {\n        console.log('Received progress update:', update);\n        \n        // Update realtime progress state\n        setRealtimeProgress(update);\n        \n        // Invalidate and refetch query to get latest data\n        queryClient.invalidateQueries({\n          queryKey: [\"/api/jobs\", jobId, \"progress\"]\n        });\n        \n        // Show toast for status changes\n        if (update.status === 'COMPLETED') {\n          toast({\n            title: \"Document Ready!\",\n            description: \"Your document has been successfully created.\",\n            variant: \"default\",\n          });\n        } else if (update.status === 'FAILED') {\n          toast({\n            title: \"Processing Failed\",\n            description: update.errorMessage || \"An error occurred during processing.\",\n            variant: \"destructive\",\n          });\n        }\n      }\n    });\n\n    return () => {\n      unsubscribeProgressHandler();\n    };\n  }, [jobId, onProgressUpdate, queryClient, toast]);\n\n  // Separate effect for subscription management\n  useEffect(() => {\n    if (connectionState === 'authenticated' && jobId) {\n      // Subscribe to job updates when connection is fully ready and authenticated\n      const success = subscribeToJob(parseInt(jobId!));\n      \n      if (success) {\n        console.log(`Successfully subscribed to job ${jobId} for real-time updates`);\n      } else {\n        console.log(`Subscription for job ${jobId} queued for when connection is ready`);\n      }\n    }\n  }, [connectionState, jobId, subscribeToJob]);\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (jobLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"animate-pulse space-y-8\">\n            <div className=\"h-32 bg-muted rounded-xl\"></div>\n            <div className=\"h-64 bg-muted rounded-xl\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Use realtime progress if available, otherwise fall back to API data\n  const currentJob = realtimeProgress && realtimeProgress.jobId === parseInt(jobId!) \n    ? { ...jobData, ...realtimeProgress } \n    : jobData;\n  \n  const job = currentJob as any;\n  const document = job?.document;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"bg-card border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <Link href=\"/\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back\">\n                  <ArrowLeft className=\"h-4 w-4\" />\n                </Button>\n              </Link>\n              <span className=\"text-lg font-semibold text-foreground\">Processing Document</span>\n            </div>\n            \n            <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n              {/* WebSocket Connection Status */}\n              <div className=\"flex items-center space-x-2\">\n                <div className={`w-2 h-2 rounded-full ${\n                  connectionState === 'authenticated' && isSubscriptionActive(parseInt(jobId!)) ? 'bg-green-500' : \n                  connectionState === 'connected' || connectionState === 'connecting' || isSubscriptionPending(parseInt(jobId!)) ? 'bg-yellow-500 animate-pulse' : \n                  'bg-red-500'\n                }`}></div>\n                <span data-testid=\"text-ws-status\">\n                  {connectionState === 'authenticated' && isSubscriptionActive(parseInt(jobId!)) ? 'Subscribed' :\n                   connectionState === 'connected' ? 'Authenticating...' :\n                   connectionState === 'connecting' ? 'Connecting...' :\n                   isSubscriptionPending(parseInt(jobId!)) ? 'Subscribing...' : \n                   'Disconnected'}\n                </span>\n              </div>\n              \n              {/* Processing Status */}\n              <div className=\"flex items-center space-x-2\">\n                <div className={`w-2 h-2 rounded-full ${job?.status === 'PROCESSING' ? 'animate-pulse bg-blue-500' : job?.status === 'COMPLETED' ? 'bg-green-500' : 'bg-gray-500'}`}></div>\n                <span data-testid=\"text-processing-status\">\n                  {job?.status === 'COMPLETED' ? 'Completed' : \n                   job?.status === 'FAILED' ? 'Failed' : \n                   job?.status === 'PROCESSING' ? 'Processing...' : 'Pending'}\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Video Information */}\n        {document && (\n          <VideoInfo\n            title={document.videoTitle || 'Processing Video'}\n            duration={document.videoDuration || 0}\n            documentType={document.documentType}\n            youtubeUrl={document.youtubeUrl}\n          />\n        )}\n\n        {/* Progress Section */}\n        <div className=\"bg-card border border-border rounded-xl p-8\">\n          <div className=\"text-center mb-8\">\n            <h3 className=\"text-2xl font-semibold text-foreground mb-2\">Processing Your Document</h3>\n            <p className=\"text-muted-foreground\">\n              Our AI is transforming your video into a professional {document?.documentType?.toLowerCase()}\n            </p>\n          </div>\n\n          {/* Overall Progress */}\n          <ProgressBar \n            progress={job?.progress || 0}\n            status={job?.status || 'PENDING'}\n          />\n\n          {/* Processing Steps */}\n          <ProcessingSteps \n            currentStep={job?.currentStep}\n            progress={job?.progress || 0}\n            status={job?.status || 'PENDING'}\n            errorMessage={job?.errorMessage}\n          />\n\n          {/* Navigation */}\n          {job?.status === 'COMPLETED' && document && (\n            <div className=\"mt-8 text-center\">\n              <Link href={`/editor/${document.id}`}>\n                <Button size=\"lg\" data-testid=\"button-view-document\">\n                  View Document\n                </Button>\n              </Link>\n            </div>\n          )}\n\n          {job?.status === 'FAILED' && (\n            <div className=\"mt-8 text-center\">\n              <Link href=\"/\">\n                <Button variant=\"outline\" size=\"lg\" data-testid=\"button-try-again\">\n                  Try Again\n                </Button>\n              </Link>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8881},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/services/api.ts":{"content":"import { apiRequest } from \"@/lib/queryClient\";\n\nexport interface VideoInfo {\n  videoId: string;\n  duration: number;\n  durationFormatted: string;\n  thumbnail: string;\n  hoursNeeded: number;\n  canProcess: boolean;\n  hoursAvailable: number;\n}\n\nexport interface ProcessingJob {\n  success: boolean;\n  documentId: number;\n  jobId: number;\n  estimatedDuration: number;\n  processingTime: number;\n}\n\nexport interface JobProgress {\n  jobId: number;\n  status: string;\n  progress: number;\n  currentStep?: string;\n  errorMessage?: string;\n  document?: any;\n}\n\nexport interface DashboardStats {\n  documentsCount: number;\n  hoursUsed: number;\n  hoursLimit: number;\n  successRate: number;\n}\n\nexport interface DocumentListResponse {\n  documents: Array<{\n    id: number;\n    youtubeUrl: string;\n    videoTitle?: string;\n    documentType: string;\n    status: string;\n    createdAt: string;\n    updatedAt: string;\n    fileSize?: string;\n  }>;\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    pages: number;\n  };\n}\n\nexport const api = {\n  // Video processing\n  async validateVideo(youtubeUrl: string): Promise<VideoInfo> {\n    const response = await apiRequest('POST', '/api/videos/info', { youtubeUrl });\n    return response.json();\n  },\n\n  async processVideo(youtubeUrl: string, documentType: string): Promise<ProcessingJob> {\n    const response = await apiRequest('POST', '/api/videos/process', {\n      youtubeUrl,\n      documentType\n    });\n    return response.json();\n  },\n\n  // Job management\n  async getJobProgress(jobId: number): Promise<JobProgress> {\n    const response = await apiRequest('GET', `/api/jobs/${jobId}/progress`);\n    return response.json();\n  },\n\n  // Documents\n  async getDocuments(page = 1, limit = 10): Promise<DocumentListResponse> {\n    const response = await apiRequest('GET', `/api/documents?page=${page}&limit=${limit}`);\n    return response.json();\n  },\n\n  async getDocument(documentId: number): Promise<any> {\n    const response = await apiRequest('GET', `/api/documents/${documentId}`);\n    return response.json();\n  },\n\n  async downloadDocument(documentId: number): Promise<Blob> {\n    const response = await apiRequest('GET', `/api/documents/${documentId}/download`);\n    return response.blob();\n  },\n\n  // Dashboard\n  async getDashboardStats(): Promise<DashboardStats> {\n    const response = await apiRequest('GET', '/api/dashboard/stats');\n    return response.json();\n  },\n\n  // Queue stats\n  async getQueueStats(): Promise<{\n    waiting: number;\n    active: number;\n    completed: number;\n    failed: number;\n  }> {\n    const response = await apiRequest('GET', '/api/queue/stats');\n    return response.json();\n  }\n};\n\nexport default api;\n","size_bytes":2686},"client/src/components/Dashboard/DocumentsList.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { FileText, Download, Clock, AlertCircle } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { Link } from \"wouter\";\n\nexport default function DocumentsList() {\n  const { data: documentsData, isLoading } = useQuery({\n    queryKey: [\"/api/documents\"],\n    retry: false,\n  });\n\n  const documents = (documentsData as any)?.documents || [];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'COMPLETED':\n        return 'bg-green-100 text-green-700 border-green-200';\n      case 'PROCESSING':\n        return 'bg-yellow-100 text-yellow-700 border-yellow-200';\n      case 'FAILED':\n        return 'bg-red-100 text-red-700 border-red-200';\n      default:\n        return 'bg-gray-100 text-gray-700 border-gray-200';\n    }\n  };\n\n  const getDocumentIcon = (type: string) => {\n    switch (type) {\n      case 'TUTORIAL':\n        return <div className=\"w-10 h-10 bg-secondary/10 rounded-lg flex items-center justify-center\">\n          <div className=\"w-5 h-5 text-secondary\">\n            <svg viewBox=\"0 0 24 24\" fill=\"currentColor\">\n              <path d=\"M3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm4 4h14v-2H7v2zm0 4h14v-2H7v2zM7 7v2h14V7H7z\"/>\n            </svg>\n          </div>\n        </div>;\n      default:\n        return <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n          <FileText className=\"h-5 w-5 text-primary\" />\n        </div>;\n    }\n  };\n\n  const handleDownload = async (documentId: number, title: string) => {\n    try {\n      const response = await fetch(`/api/documents/${documentId}/download`, {\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Download failed');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = `${title || 'document'}.html`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n    } catch (error) {\n      console.error('Download failed:', error);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-card border border-border rounded-xl p-6\">\n        <div className=\"space-y-4\">\n          {[...Array(3)].map((_, i) => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"flex items-center justify-between p-4 border border-border rounded-lg\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-10 h-10 bg-muted rounded-lg\"></div>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-4 bg-muted rounded w-32\"></div>\n                    <div className=\"h-3 bg-muted rounded w-24\"></div>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"h-6 bg-muted rounded w-16\"></div>\n                  <div className=\"w-8 h-8 bg-muted rounded\"></div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card border border-border rounded-xl p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h2 className=\"text-xl font-semibold text-foreground\">Recent Documents</h2>\n        <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all\">\n          View All\n        </Button>\n      </div>\n      \n      <div className=\"space-y-4\">\n        {documents.length === 0 ? (\n          <div className=\"text-center py-8\" data-testid=\"text-no-documents\">\n            <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <p className=\"text-muted-foreground\">No documents created yet</p>\n            <p className=\"text-sm text-muted-foreground mt-2\">Create your first document using the form above</p>\n          </div>\n        ) : (\n          documents.map((doc: any) => (\n            <div \n              key={doc.id} \n              className=\"flex items-center justify-between p-4 border border-border rounded-lg hover:bg-muted/50 transition-colors\"\n              data-testid={`document-${doc.id}`}\n            >\n              <div className=\"flex items-center space-x-4\">\n                {getDocumentIcon(doc.documentType)}\n                <div>\n                  <h3 className=\"font-medium text-foreground\" data-testid={`document-title-${doc.id}`}>\n                    {doc.videoTitle || 'Untitled Document'}\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {doc.documentType.charAt(0) + doc.documentType.slice(1).toLowerCase()} â€¢ \n                    Created {formatDistanceToNow(new Date(doc.createdAt), { addSuffix: true })}\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Badge \n                  className={getStatusColor(doc.status)}\n                  data-testid={`document-status-${doc.id}`}\n                >\n                  {doc.status === 'PROCESSING' && <Clock className=\"h-3 w-3 mr-1\" />}\n                  {doc.status === 'FAILED' && <AlertCircle className=\"h-3 w-3 mr-1\" />}\n                  {doc.status.charAt(0) + doc.status.slice(1).toLowerCase()}\n                </Badge>\n                {doc.status === 'COMPLETED' ? (\n                  <div className=\"flex items-center space-x-1\">\n                    <Link href={`/editor/${doc.id}`}>\n                      <Button variant=\"ghost\" size=\"sm\" data-testid={`button-edit-${doc.id}`}>\n                        Edit\n                      </Button>\n                    </Link>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      onClick={() => handleDownload(doc.id, doc.videoTitle)}\n                      data-testid={`button-download-${doc.id}`}\n                    >\n                      <Download className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                ) : doc.status === 'PROCESSING' ? (\n                  <Link href={`/processing/${doc.id}`}>\n                    <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-progress-${doc.id}`}>\n                      View Progress\n                    </Button>\n                  </Link>\n                ) : (\n                  <div className=\"w-8 h-8\"></div>\n                )}\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":6754},"client/src/components/Dashboard/NewDocumentForm.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Link, FileText, Map, Utensils, PresentationIcon, FileText as Summary } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nconst documentTypes = [\n  { id: 'EBOOK', label: 'E-book', icon: FileText, color: 'primary' },\n  { id: 'TUTORIAL', label: 'Tutorial', icon: FileText, color: 'secondary' },\n  { id: 'GUIDE', label: 'Guide', icon: Map, color: 'accent' },\n  { id: 'RECIPE', label: 'Recipe', icon: Utensils, color: 'orange' },\n];\n\nexport default function NewDocumentForm() {\n  const [youtubeUrl, setYoutubeUrl] = useState('');\n  const [selectedType, setSelectedType] = useState('EBOOK');\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const processMutation = useMutation({\n    mutationFn: async (data: { youtubeUrl: string; documentType: string }) => {\n      const response = await apiRequest('POST', '/api/videos/process', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Processing Started\",\n        description: \"Your video is being processed. You'll be redirected to the progress page.\",\n      });\n      \n      // Invalidate and refetch documents list\n      queryClient.invalidateQueries({ queryKey: ['/api/documents'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n      \n      // Redirect to processing page\n      setLocation(`/processing/${data.jobId}`);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to start processing\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const validateMutation = useMutation({\n    mutationFn: async (youtubeUrl: string) => {\n      const response = await apiRequest('POST', '/api/videos/info', { youtubeUrl });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Video Validated\",\n        description: `Video duration: ${data.durationFormatted}. Ready to process!`,\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\", \n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Validation Failed\",\n        description: error.message || \"Could not validate YouTube URL\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!youtubeUrl.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a YouTube URL\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    processMutation.mutate({ youtubeUrl: youtubeUrl.trim(), documentType: selectedType });\n  };\n\n  const handleValidate = () => {\n    if (!youtubeUrl.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a YouTube URL first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    validateMutation.mutate(youtubeUrl.trim());\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-xl p-8 mb-8\">\n      <h2 className=\"text-xl font-semibold text-foreground mb-6\">Create New Document</h2>\n      \n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        {/* YouTube URL Input */}\n        <div className=\"space-y-2\">\n          <label className=\"text-sm font-medium text-foreground\">YouTube URL</label>\n          <div className=\"flex space-x-2\">\n            <div className=\"relative flex-1\">\n              <Input\n                type=\"url\"\n                placeholder=\"https://youtube.com/watch?v=...\"\n                value={youtubeUrl}\n                onChange={(e) => setYoutubeUrl(e.target.value)}\n                className=\"pr-12\"\n                data-testid=\"input-youtube-url\"\n              />\n              <Link className=\"absolute right-3 top-3 h-4 w-4 text-muted-foreground\" />\n            </div>\n            <Button \n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleValidate}\n              disabled={validateMutation.isPending}\n              data-testid=\"button-validate\"\n            >\n              {validateMutation.isPending ? 'Validating...' : 'Validate'}\n            </Button>\n          </div>\n        </div>\n        \n        {/* Document Type Selection */}\n        <div className=\"space-y-2\">\n          <label className=\"text-sm font-medium text-foreground\">Document Type</label>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n            {documentTypes.map((type) => {\n              const Icon = type.icon;\n              const isSelected = selectedType === type.id;\n              \n              return (\n                <button\n                  key={type.id}\n                  type=\"button\"\n                  onClick={() => setSelectedType(type.id)}\n                  className={`p-4 border-2 rounded-lg text-center transition-colors ${\n                    isSelected \n                      ? 'border-primary bg-primary/5' \n                      : 'border-border hover:border-primary hover:bg-primary/5'\n                  }`}\n                  data-testid={`button-type-${type.id.toLowerCase()}`}\n                >\n                  <Icon className={`h-6 w-6 mb-2 mx-auto ${\n                    isSelected ? 'text-primary' : 'text-muted-foreground'\n                  }`} />\n                  <span className={`text-sm font-medium ${\n                    isSelected ? 'text-primary' : 'text-muted-foreground'\n                  }`}>\n                    {type.label}\n                  </span>\n                </button>\n              );\n            })}\n          </div>\n        </div>\n        \n        <div className=\"flex space-x-4\">\n          <Button \n            type=\"submit\"\n            size=\"lg\"\n            disabled={processMutation.isPending}\n            data-testid=\"button-start-processing\"\n          >\n            {processMutation.isPending ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2\"></div>\n                Processing...\n              </>\n            ) : (\n              <>\n                <FileText className=\"mr-2 h-4 w-4\" />\n                Start Processing\n              </>\n            )}\n          </Button>\n          <Button \n            type=\"button\" \n            variant=\"outline\" \n            size=\"lg\"\n            data-testid=\"button-save-draft\"\n          >\n            Save as Draft\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n","size_bytes":7368},"client/src/components/Dashboard/StatsCard.tsx":{"content":"import { FileText, Clock, User, Check } from \"lucide-react\";\n\ninterface StatsCardProps extends React.HTMLAttributes<HTMLDivElement> {\n  title: string;\n  value: string | number;\n  icon: \"file-text\" | \"clock\" | \"user\" | \"check\";\n  color: \"primary\" | \"secondary\" | \"accent\" | \"green\";\n}\n\nconst iconMap = {\n  \"file-text\": FileText,\n  clock: Clock,\n  user: User,\n  check: Check,\n};\n\nconst colorMap = {\n  primary: \"bg-primary/10 text-primary\",\n  secondary: \"bg-secondary/10 text-secondary\", \n  accent: \"bg-accent/10 text-accent\",\n  green: \"bg-green-100 text-green-600\",\n};\n\nexport default function StatsCard({ title, value, icon, color, ...props }: StatsCardProps) {\n  const Icon = iconMap[icon];\n  \n  return (\n    <div className=\"bg-card border border-border rounded-xl p-6\" {...props}>\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-sm font-medium text-muted-foreground\">{title}</p>\n          <p className=\"text-2xl font-bold text-foreground\">{value}</p>\n        </div>\n        <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${colorMap[color]}`}>\n          <Icon className=\"h-5 w-5\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1206},"client/src/components/Editor/DocumentPreview.tsx":{"content":"import { ScrollArea } from \"@/components/ui/scroll-area\";\n\ninterface DocumentPreviewProps {\n  document: any;\n}\n\nexport default function DocumentPreview({ document }: DocumentPreviewProps) {\n  const renderContent = () => {\n    if (!document.content) {\n      return (\n        <div className=\"text-center py-8\">\n          <p className=\"text-muted-foreground\">No content available</p>\n        </div>\n      );\n    }\n\n    const content = document.content;\n\n    // Render based on document type\n    switch (document.documentType) {\n      case 'EBOOK':\n        return renderEbook(content);\n      case 'TUTORIAL':\n        return renderTutorial(content);\n      case 'GUIDE':\n        return renderGuide(content);\n      case 'RECIPE':\n        return renderRecipe(content);\n      case 'PRESENTATION':\n        return renderPresentation(content);\n      case 'SUMMARY':\n        return renderSummary(content);\n      default:\n        return renderGeneric(content);\n    }\n  };\n\n  const renderEbook = (content: any) => (\n    <div className=\"space-y-8\">\n      {/* Title Page */}\n      <div className=\"bg-gradient-to-r from-primary to-secondary p-8 text-primary-foreground rounded-t-xl\">\n        <h1 className=\"text-3xl font-bold mb-4\" data-testid=\"ebook-title\">\n          {content.title || document.videoTitle}\n        </h1>\n        {content.subtitle && (\n          <p className=\"text-primary-foreground/80 text-lg\" data-testid=\"ebook-subtitle\">\n            {content.subtitle}\n          </p>\n        )}\n        <div className=\"mt-4 flex items-center space-x-4 text-sm text-primary-foreground/70\">\n          <span>Generated from YouTube Video</span>\n          <span>â€¢</span>\n          <span>Professional E-book</span>\n        </div>\n      </div>\n\n      {/* Introduction */}\n      {content.introduction && (\n        <section className=\"p-8\">\n          <h2 className=\"text-2xl font-bold text-foreground mb-4 border-b border-border pb-2\">\n            Introduction\n          </h2>\n          <div className=\"prose prose-lg max-w-none text-foreground space-y-4\">\n            <p>{content.introduction}</p>\n          </div>\n        </section>\n      )}\n\n      {/* Chapters */}\n      {content.chapters && content.chapters.map((chapter: any, index: number) => (\n        <section key={index} className=\"p-8\">\n          <h2 className=\"text-2xl font-bold text-foreground mb-4 border-b border-border pb-2\">\n            Chapter {index + 1}: {chapter.title}\n          </h2>\n          <div className=\"prose prose-lg max-w-none text-foreground space-y-4\">\n            <p>{chapter.content}</p>\n          </div>\n        </section>\n      ))}\n\n      {/* Conclusion */}\n      {content.conclusion && (\n        <section className=\"p-8\">\n          <h2 className=\"text-2xl font-bold text-foreground mb-4 border-b border-border pb-2\">\n            Conclusion\n          </h2>\n          <div className=\"prose prose-lg max-w-none text-foreground space-y-4\">\n            <p>{content.conclusion}</p>\n          </div>\n        </section>\n      )}\n\n      {/* Key Takeaways */}\n      {content.keyTakeaways && (\n        <section className=\"p-8\">\n          <div className=\"bg-green-50 dark:bg-green-900/20 p-6 rounded-lg border-l-4 border-green-500\">\n            <h3 className=\"text-xl font-semibold text-green-700 dark:text-green-400 mb-4\">\n              Key Takeaways\n            </h3>\n            <ul className=\"list-disc list-inside space-y-2 text-green-800 dark:text-green-300\">\n              {content.keyTakeaways.map((takeaway: string, index: number) => (\n                <li key={index}>{takeaway}</li>\n              ))}\n            </ul>\n          </div>\n        </section>\n      )}\n    </div>\n  );\n\n  const renderTutorial = (content: any) => (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 p-8 text-white rounded-t-xl\">\n        <h1 className=\"text-3xl font-bold mb-4\" data-testid=\"tutorial-title\">\n          {content.title || document.videoTitle}\n        </h1>\n        {content.description && (\n          <p className=\"text-white/90 text-lg\">{content.description}</p>\n        )}\n      </div>\n\n      {/* Materials */}\n      {content.materials && (\n        <section className=\"p-8\">\n          <div className=\"bg-blue-50 dark:bg-blue-900/20 p-6 rounded-lg border-l-4 border-blue-500\">\n            <h3 className=\"text-xl font-semibold text-blue-700 dark:text-blue-400 mb-4\">\n              Materials Needed\n            </h3>\n            <ul className=\"list-disc list-inside space-y-2 text-blue-800 dark:text-blue-300\">\n              {content.materials.map((material: string, index: number) => (\n                <li key={index}>{material}</li>\n              ))}\n            </ul>\n          </div>\n        </section>\n      )}\n\n      {/* Steps */}\n      {content.steps && (\n        <section className=\"p-8 space-y-6\">\n          <h2 className=\"text-2xl font-bold text-foreground mb-6\">Steps</h2>\n          {content.steps.map((step: any, index: number) => (\n            <div key={index} className=\"border border-border rounded-lg p-6 bg-card\">\n              <h3 className=\"text-xl font-semibold text-foreground mb-4 flex items-center\">\n                <span className=\"w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center mr-3 text-sm font-bold\">\n                  {step.stepNumber || index + 1}\n                </span>\n                {step.title}\n              </h3>\n              <div className=\"prose max-w-none text-foreground mb-4\">\n                <p>{step.content}</p>\n              </div>\n              {step.tips && (\n                <div className=\"bg-yellow-50 dark:bg-yellow-900/20 p-4 rounded-lg border-l-4 border-yellow-500\">\n                  <p className=\"text-yellow-800 dark:text-yellow-300\">\n                    <strong>Tip:</strong> {step.tips}\n                  </p>\n                </div>\n              )}\n            </div>\n          ))}\n        </section>\n      )}\n    </div>\n  );\n\n  const renderGuide = (content: any) => (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-green-600 to-teal-600 p-8 text-white rounded-t-xl\">\n        <h1 className=\"text-3xl font-bold mb-4\" data-testid=\"guide-title\">\n          {content.title || document.videoTitle}\n        </h1>\n      </div>\n\n      {/* Overview */}\n      {content.overview && (\n        <section className=\"p-8\">\n          <div className=\"bg-gray-50 dark:bg-gray-900/20 p-6 rounded-lg border-l-4 border-gray-500\">\n            <h3 className=\"text-xl font-semibold text-gray-700 dark:text-gray-400 mb-4\">\n              Overview\n            </h3>\n            <p className=\"text-gray-800 dark:text-gray-300\">{content.overview}</p>\n          </div>\n        </section>\n      )}\n\n      {/* Sections */}\n      {content.sections && content.sections.map((section: any, index: number) => (\n        <section key={index} className=\"p-8\">\n          <h2 className=\"text-2xl font-bold text-foreground mb-4 border-b border-border pb-2\">\n            {section.title}\n          </h2>\n          <div className=\"prose prose-lg max-w-none text-foreground\">\n            <p>{section.content}</p>\n          </div>\n        </section>\n      ))}\n    </div>\n  );\n\n  const renderRecipe = (content: any) => (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-orange-600 to-red-600 p-8 text-white rounded-t-xl\">\n        <h1 className=\"text-3xl font-bold mb-4\" data-testid=\"recipe-title\">\n          {content.title || document.videoTitle}\n        </h1>\n        {content.description && (\n          <p className=\"text-white/90 text-lg\">{content.description}</p>\n        )}\n      </div>\n\n      {/* Recipe Meta */}\n      <section className=\"p-8\">\n        <div className=\"grid grid-cols-3 gap-4\">\n          {content.prepTime && (\n            <div className=\"text-center p-4 bg-card border border-border rounded-lg\">\n              <div className=\"text-sm font-medium text-muted-foreground\">Prep Time</div>\n              <div className=\"text-lg font-bold text-orange-600\">{content.prepTime}</div>\n            </div>\n          )}\n          {content.cookTime && (\n            <div className=\"text-center p-4 bg-card border border-border rounded-lg\">\n              <div className=\"text-sm font-medium text-muted-foreground\">Cook Time</div>\n              <div className=\"text-lg font-bold text-orange-600\">{content.cookTime}</div>\n            </div>\n          )}\n          {content.servings && (\n            <div className=\"text-center p-4 bg-card border border-border rounded-lg\">\n              <div className=\"text-sm font-medium text-muted-foreground\">Servings</div>\n              <div className=\"text-lg font-bold text-orange-600\">{content.servings}</div>\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Ingredients */}\n      {content.ingredients && (\n        <section className=\"p-8\">\n          <div className=\"bg-green-50 dark:bg-green-900/20 p-6 rounded-lg border-l-4 border-green-500\">\n            <h3 className=\"text-xl font-semibold text-green-700 dark:text-green-400 mb-4\">\n              Ingredients\n            </h3>\n            <ul className=\"list-disc list-inside space-y-2 text-green-800 dark:text-green-300\">\n              {content.ingredients.map((ingredient: string, index: number) => (\n                <li key={index}>{ingredient}</li>\n              ))}\n            </ul>\n          </div>\n        </section>\n      )}\n\n      {/* Instructions */}\n      {content.instructions && (\n        <section className=\"p-8 space-y-6\">\n          <h2 className=\"text-2xl font-bold text-foreground mb-6\">Instructions</h2>\n          {content.instructions.map((instruction: any, index: number) => (\n            <div key={index} className=\"border border-border rounded-lg p-6 bg-card\">\n              <h3 className=\"text-xl font-semibold text-foreground mb-4 flex items-center\">\n                <span className=\"w-8 h-8 bg-orange-600 text-white rounded-full flex items-center justify-center mr-3 text-sm font-bold\">\n                  {instruction.step || index + 1}\n                </span>\n                Step {instruction.step || index + 1}\n              </h3>\n              <p className=\"text-foreground\">{instruction.instruction}</p>\n            </div>\n          ))}\n        </section>\n      )}\n    </div>\n  );\n\n  const renderPresentation = (content: any) => (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-purple-600 to-indigo-600 p-8 text-white rounded-t-xl\">\n        <h1 className=\"text-3xl font-bold mb-4\" data-testid=\"presentation-title\">\n          {content.title || document.videoTitle}\n        </h1>\n        {content.subtitle && (\n          <p className=\"text-white/90 text-lg\">{content.subtitle}</p>\n        )}\n        <div className=\"mt-4 flex items-center space-x-4 text-sm text-white/70\">\n          <span>Generated from YouTube Video</span>\n          <span>â€¢</span>\n          <span>Professional Presentation</span>\n        </div>\n      </div>\n\n      {/* Slides */}\n      {content.slides && content.slides.map((slide: any, index: number) => (\n        <section key={index} className=\"p-8 border-b border-border last:border-b-0\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-2xl font-bold text-foreground\">\n              Slide {slide.slideNumber || index + 1}: {slide.title}\n            </h2>\n            <span className=\"text-sm text-muted-foreground bg-muted px-3 py-1 rounded-full\">\n              Slide {slide.slideNumber || index + 1}\n            </span>\n          </div>\n          <div className=\"prose prose-lg max-w-none text-foreground space-y-4\">\n            <div className=\"whitespace-pre-wrap\">{slide.content}</div>\n          </div>\n          {slide.notes && (\n            <div className=\"mt-6 bg-yellow-50 dark:bg-yellow-900/20 p-4 rounded-lg border-l-4 border-yellow-500\">\n              <h4 className=\"text-sm font-semibold text-yellow-700 dark:text-yellow-400 mb-2\">\n                Speaker Notes\n              </h4>\n              <p className=\"text-sm text-yellow-800 dark:text-yellow-300\">{slide.notes}</p>\n            </div>\n          )}\n        </section>\n      ))}\n    </div>\n  );\n\n  const renderSummary = (content: any) => (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-green-600 to-teal-600 p-8 text-white rounded-t-xl\">\n        <h1 className=\"text-3xl font-bold mb-4\" data-testid=\"summary-title\">\n          {content.title || document.videoTitle}\n        </h1>\n        <div className=\"mt-4 flex items-center space-x-4 text-sm text-white/70\">\n          <span>Generated from YouTube Video</span>\n          <span>â€¢</span>\n          <span>Executive Summary</span>\n        </div>\n      </div>\n\n      {/* Overview */}\n      {content.overview && (\n        <section className=\"p-8\">\n          <div className=\"bg-green-50 dark:bg-green-900/20 p-6 rounded-lg border-l-4 border-green-500\">\n            <h3 className=\"text-xl font-semibold text-green-700 dark:text-green-400 mb-4\">\n              Overview\n            </h3>\n            <p className=\"text-green-800 dark:text-green-300\">{content.overview}</p>\n          </div>\n        </section>\n      )}\n\n      {/* Main Points */}\n      {content.mainPoints && (\n        <section className=\"p-8\">\n          <h2 className=\"text-2xl font-bold text-foreground mb-6 border-b border-border pb-2\">\n            Key Points\n          </h2>\n          <ul className=\"space-y-4\">\n            {content.mainPoints.map((point: string, index: number) => (\n              <li key={index} className=\"flex items-start space-x-3\">\n                <span className=\"w-6 h-6 bg-green-600 text-white rounded-full flex items-center justify-center text-sm font-bold mt-1\">\n                  {index + 1}\n                </span>\n                <p className=\"text-foreground flex-1\">{point}</p>\n              </li>\n            ))}\n          </ul>\n        </section>\n      )}\n\n      {/* Detailed Summary */}\n      {content.details && (\n        <section className=\"p-8\">\n          <h2 className=\"text-2xl font-bold text-foreground mb-6 border-b border-border pb-2\">\n            Detailed Summary\n          </h2>\n          <div className=\"space-y-6\">\n            {content.details.map((detail: any, index: number) => (\n              <div key={index} className=\"border border-border rounded-lg p-6 bg-card\">\n                <h3 className=\"text-xl font-semibold text-foreground mb-4\">{detail.topic}</h3>\n                <p className=\"text-muted-foreground\">{detail.summary}</p>\n              </div>\n            ))}\n          </div>\n        </section>\n      )}\n\n      {/* Conclusion */}\n      {content.conclusion && (\n        <section className=\"p-8\">\n          <div className=\"bg-gray-50 dark:bg-gray-900/20 p-6 rounded-lg border-l-4 border-gray-500\">\n            <h3 className=\"text-xl font-semibold text-gray-700 dark:text-gray-400 mb-4\">\n              Conclusion\n            </h3>\n            <p className=\"text-gray-800 dark:text-gray-300 italic\">{content.conclusion}</p>\n          </div>\n        </section>\n      )}\n    </div>\n  );\n\n  const renderGeneric = (content: any) => (\n    <div className=\"space-y-8 p-8\">\n      <h1 className=\"text-3xl font-bold text-foreground mb-4\">\n        {content.title || document.videoTitle}\n      </h1>\n      <div className=\"prose prose-lg max-w-none text-foreground\">\n        <pre className=\"whitespace-pre-wrap\">{JSON.stringify(content, null, 2)}</pre>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"flex-1 bg-muted/30 overflow-hidden\">\n      <ScrollArea className=\"h-full\">\n        <div className=\"max-w-4xl mx-auto p-8\">\n          <div className=\"bg-card border border-border rounded-xl shadow-lg overflow-hidden\" data-testid=\"document-preview\">\n            {renderContent()}\n          </div>\n        </div>\n      </ScrollArea>\n    </div>\n  );\n}\n","size_bytes":15894},"client/src/components/Editor/EditorSidebar.tsx":{"content":"import { useState } from \"react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, Book, Laptop, File, List, Hash } from \"lucide-react\";\n\ninterface EditorSidebarProps {\n  document: any;\n}\n\nexport default function EditorSidebar({ document }: EditorSidebarProps) {\n  const [selectedTemplate, setSelectedTemplate] = useState('classic');\n  const [exportFormats, setExportFormats] = useState({\n    pdf: true,\n    word: false,\n    html: false,\n  });\n\n  const getDocumentStructure = () => {\n    if (!document.content) return [];\n\n    const structure = [];\n    const content = document.content;\n\n    // Add introduction if available\n    if (content.introduction || content.overview || content.description) {\n      structure.push({\n        id: 'introduction',\n        title: 'Introduction',\n        type: 'intro',\n        icon: FileText\n      });\n    }\n\n    // Add main content sections based on document type\n    switch (document.documentType) {\n      case 'EBOOK':\n        if (content.chapters) {\n          content.chapters.forEach((chapter: any, index: number) => {\n            structure.push({\n              id: `chapter-${index}`,\n              title: `Chapter ${index + 1}: ${chapter.title}`,\n              type: 'chapter',\n              icon: List\n            });\n          });\n        }\n        if (content.conclusion) {\n          structure.push({\n            id: 'conclusion',\n            title: 'Conclusion',\n            type: 'conclusion',\n            icon: FileText\n          });\n        }\n        break;\n\n      case 'TUTORIAL':\n        if (content.materials) {\n          structure.push({\n            id: 'materials',\n            title: 'Materials',\n            type: 'materials',\n            icon: List\n          });\n        }\n        if (content.steps) {\n          content.steps.forEach((step: any, index: number) => {\n            structure.push({\n              id: `step-${index}`,\n              title: `Step ${step.stepNumber || index + 1}: ${step.title}`,\n              type: 'step',\n              icon: Hash\n            });\n          });\n        }\n        break;\n\n      case 'GUIDE':\n        if (content.sections) {\n          content.sections.forEach((section: any, index: number) => {\n            structure.push({\n              id: `section-${index}`,\n              title: section.title,\n              type: 'section',\n              icon: List\n            });\n          });\n        }\n        break;\n\n      case 'RECIPE':\n        if (content.ingredients) {\n          structure.push({\n            id: 'ingredients',\n            title: 'Ingredients',\n            type: 'ingredients',\n            icon: List\n          });\n        }\n        if (content.instructions) {\n          structure.push({\n            id: 'instructions',\n            title: 'Instructions',\n            type: 'instructions',\n            icon: Hash\n          });\n        }\n        break;\n\n      case 'PRESENTATION':\n        if (content.slides) {\n          content.slides.forEach((slide: any, index: number) => {\n            structure.push({\n              id: `slide-${index}`,\n              title: `Slide ${slide.slideNumber || index + 1}: ${slide.title}`,\n              type: 'slide',\n              icon: Laptop\n            });\n          });\n        }\n        break;\n\n      case 'SUMMARY':\n        if (content.overview) {\n          structure.push({\n            id: 'overview',\n            title: 'Overview',\n            type: 'overview',\n            icon: FileText\n          });\n        }\n        if (content.mainPoints) {\n          structure.push({\n            id: 'main-points',\n            title: 'Key Points',\n            type: 'main-points',\n            icon: List\n          });\n        }\n        if (content.details) {\n          structure.push({\n            id: 'details',\n            title: 'Detailed Summary',\n            type: 'details',\n            icon: Hash\n          });\n        }\n        if (content.conclusion) {\n          structure.push({\n            id: 'conclusion',\n            title: 'Conclusion',\n            type: 'conclusion',\n            icon: FileText\n          });\n        }\n        break;\n    }\n\n    return structure;\n  };\n\n  const getDocumentStats = () => {\n    if (!document.content) {\n      return { wordCount: 0, pages: 0, readingTime: 0 };\n    }\n\n    // Estimate word count from content\n    let totalText = '';\n    const content = document.content;\n\n    if (content.introduction) totalText += content.introduction + ' ';\n    if (content.description) totalText += content.description + ' ';\n    if (content.overview) totalText += content.overview + ' ';\n    if (content.conclusion) totalText += content.conclusion + ' ';\n\n    if (content.chapters) {\n      content.chapters.forEach((chapter: any) => {\n        totalText += chapter.content + ' ';\n      });\n    }\n\n    if (content.sections) {\n      content.sections.forEach((section: any) => {\n        totalText += section.content + ' ';\n      });\n    }\n\n    if (content.steps) {\n      content.steps.forEach((step: any) => {\n        totalText += step.content + ' ';\n      });\n    }\n\n    if (content.slides) {\n      content.slides.forEach((slide: any) => {\n        totalText += slide.content + ' ';\n        if (slide.notes) totalText += slide.notes + ' ';\n      });\n    }\n\n    if (content.mainPoints) {\n      content.mainPoints.forEach((point: string) => {\n        totalText += point + ' ';\n      });\n    }\n\n    if (content.details) {\n      content.details.forEach((detail: any) => {\n        totalText += detail.summary + ' ';\n      });\n    }\n\n    const wordCount = totalText.split(' ').filter(word => word.length > 0).length;\n    const pages = Math.max(1, Math.ceil(wordCount / 250)); // ~250 words per page\n    const readingTime = Math.max(1, Math.ceil(wordCount / 200)); // ~200 words per minute\n\n    return { wordCount, pages, readingTime };\n  };\n\n  const structure = getDocumentStructure();\n  const stats = getDocumentStats();\n\n  const templates = [\n    { id: 'classic', label: 'Classic', icon: Book },\n    { id: 'modern', label: 'Modern', icon: Laptop },\n    { id: 'minimal', label: 'Minimal', icon: File },\n  ];\n\n  const handleExportFormatChange = (format: string, checked: boolean) => {\n    setExportFormats(prev => ({\n      ...prev,\n      [format]: checked\n    }));\n  };\n\n  return (\n    <div className=\"w-80 bg-card border-r border-border overflow-hidden flex flex-col\">\n      <ScrollArea className=\"flex-1\">\n        <div className=\"p-6 space-y-6\">\n          {/* Document Structure */}\n          <div className=\"space-y-3\">\n            <h3 className=\"font-semibold text-foreground\" data-testid=\"heading-structure\">\n              Document Structure\n            </h3>\n            <div className=\"space-y-2 text-sm\">\n              {structure.length === 0 ? (\n                <p className=\"text-muted-foreground\">No structure available</p>\n              ) : (\n                structure.map((item, index) => {\n                  const Icon = item.icon;\n                  const isActive = index === 0; // First item is active by default\n                  \n                  return (\n                    <div \n                      key={item.id}\n                      className={`flex items-center space-x-2 p-2 rounded-lg cursor-pointer transition-colors ${\n                        isActive \n                          ? 'bg-primary/10 text-primary' \n                          : 'hover:bg-muted text-foreground'\n                      }`}\n                      data-testid={`structure-item-${item.id}`}\n                    >\n                      <Icon className=\"h-4 w-4\" />\n                      <span className=\"truncate\">{item.title}</span>\n                    </div>\n                  );\n                })\n              )}\n            </div>\n          </div>\n\n          {/* Template Options */}\n          <div className=\"space-y-3\">\n            <h3 className=\"font-semibold text-foreground\">Template Style</h3>\n            <div className=\"grid grid-cols-2 gap-2\">\n              {templates.map((template) => {\n                const Icon = template.icon;\n                const isSelected = selectedTemplate === template.id;\n                \n                return (\n                  <button\n                    key={template.id}\n                    onClick={() => setSelectedTemplate(template.id)}\n                    className={`p-3 border rounded-lg text-center transition-colors ${\n                      isSelected \n                        ? 'border-primary bg-primary/5' \n                        : 'border-border hover:border-primary'\n                    }`}\n                    data-testid={`template-${template.id}`}\n                  >\n                    <Icon className={`h-5 w-5 mb-1 mx-auto ${\n                      isSelected ? 'text-primary' : 'text-muted-foreground'\n                    }`} />\n                    <span className={`text-xs ${\n                      isSelected ? 'text-primary' : 'text-muted-foreground'\n                    }`}>\n                      {template.label}\n                    </span>\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Export Options */}\n          <div className=\"space-y-3\">\n            <h3 className=\"font-semibold text-foreground\">Export Format</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox \n                  id=\"pdf\" \n                  checked={exportFormats.pdf}\n                  onCheckedChange={(checked) => handleExportFormatChange('pdf', checked as boolean)}\n                  data-testid=\"checkbox-pdf\"\n                />\n                <label htmlFor=\"pdf\" className=\"text-sm text-foreground cursor-pointer\">\n                  PDF Document\n                </label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox \n                  id=\"word\" \n                  checked={exportFormats.word}\n                  onCheckedChange={(checked) => handleExportFormatChange('word', checked as boolean)}\n                  data-testid=\"checkbox-word\"\n                />\n                <label htmlFor=\"word\" className=\"text-sm text-foreground cursor-pointer\">\n                  Word Document\n                </label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox \n                  id=\"html\" \n                  checked={exportFormats.html}\n                  onCheckedChange={(checked) => handleExportFormatChange('html', checked as boolean)}\n                  data-testid=\"checkbox-html\"\n                />\n                <label htmlFor=\"html\" className=\"text-sm text-foreground cursor-pointer\">\n                  HTML Page\n                </label>\n              </div>\n            </div>\n          </div>\n\n          {/* Document Stats */}\n          <div className=\"space-y-3\">\n            <h3 className=\"font-semibold text-foreground\">Document Stats</h3>\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Word Count:</span>\n                <span className=\"text-foreground font-medium\" data-testid=\"stat-word-count\">\n                  {stats.wordCount.toLocaleString()}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Pages:</span>\n                <span className=\"text-foreground font-medium\" data-testid=\"stat-pages\">\n                  {stats.pages}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-muted-foreground\">Reading Time:</span>\n                <span className=\"text-foreground font-medium\" data-testid=\"stat-reading-time\">\n                  {stats.readingTime} min\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Document Type Badge */}\n          <div className=\"space-y-3\">\n            <h3 className=\"font-semibold text-foreground\">Document Type</h3>\n            <Badge variant=\"outline\" className=\"w-fit\" data-testid=\"badge-document-type\">\n              {document.documentType?.charAt(0) + document.documentType?.slice(1).toLowerCase()}\n            </Badge>\n          </div>\n        </div>\n      </ScrollArea>\n    </div>\n  );\n}\n","size_bytes":12556},"client/src/components/Processing/ProcessingSteps.tsx":{"content":"import { Check, Clock, AlertCircle } from \"lucide-react\";\n\ninterface ProcessingStepsProps {\n  currentStep?: string;\n  progress: number;\n  status: string;\n  errorMessage?: string;\n}\n\ninterface Step {\n  id: string;\n  title: string;\n  description: string;\n  minProgress: number;\n}\n\nconst steps: Step[] = [\n  {\n    id: 'analyzing',\n    title: 'Video Analysis',\n    description: 'Extracting video metadata and validating content',\n    minProgress: 10\n  },\n  {\n    id: 'extracting',\n    title: 'Transcript Extraction', \n    description: 'Downloading and processing video captions',\n    minProgress: 30\n  },\n  {\n    id: 'structuring',\n    title: 'AI Content Structuring',\n    description: 'Analyzing content and creating chapters and sections',\n    minProgress: 60\n  },\n  {\n    id: 'generating',\n    title: 'Document Generation',\n    description: 'Formatting and styling your final document',\n    minProgress: 80\n  },\n  {\n    id: 'finalizing',\n    title: 'Final Review',\n    description: 'Quality check and document finalization',\n    minProgress: 90\n  }\n];\n\nexport default function ProcessingSteps({ currentStep, progress, status, errorMessage }: ProcessingStepsProps) {\n  const getStepStatus = (step: Step) => {\n    if (status === 'FAILED' && errorMessage) {\n      return progress >= step.minProgress ? 'completed' : 'pending';\n    }\n    \n    if (progress >= 100) return 'completed';\n    if (progress >= step.minProgress) return 'completed';\n    \n    // Check if this is the current step\n    const currentStepLower = currentStep?.toLowerCase() || '';\n    if (currentStepLower.includes(step.id) || \n        (step.id === 'analyzing' && currentStepLower.includes('analyz')) ||\n        (step.id === 'extracting' && currentStepLower.includes('extract')) ||\n        (step.id === 'structuring' && currentStepLower.includes('structur')) ||\n        (step.id === 'generating' && currentStepLower.includes('generat')) ||\n        (step.id === 'finalizing' && currentStepLower.includes('final'))) {\n      return 'active';\n    }\n    \n    return 'pending';\n  };\n\n  const getStepIcon = (step: Step) => {\n    const stepStatus = getStepStatus(step);\n    \n    switch (stepStatus) {\n      case 'completed':\n        return (\n          <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n            <Check className=\"h-5 w-5 text-green-600\" />\n          </div>\n        );\n      case 'active':\n        return (\n          <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center animate-pulse\">\n            <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n          </div>\n        );\n      default:\n        return (\n          <div className=\"w-10 h-10 bg-muted rounded-full flex items-center justify-center\">\n            <Clock className=\"h-5 w-5 text-muted-foreground\" />\n          </div>\n        );\n    }\n  };\n\n  const getStepTextColor = (step: Step) => {\n    const stepStatus = getStepStatus(step);\n    \n    switch (stepStatus) {\n      case 'completed':\n        return 'text-foreground';\n      case 'active':\n        return 'text-foreground';\n      default:\n        return 'text-muted-foreground';\n    }\n  };\n\n  const getStatusText = (step: Step) => {\n    const stepStatus = getStepStatus(step);\n    \n    switch (stepStatus) {\n      case 'completed':\n        return 'Completed';\n      case 'active':\n        return 'In Progress';\n      default:\n        return 'Pending';\n    }\n  };\n\n  const getStatusColor = (step: Step) => {\n    const stepStatus = getStepStatus(step);\n    \n    switch (stepStatus) {\n      case 'completed':\n        return 'text-green-600';\n      case 'active':\n        return 'text-primary';\n      default:\n        return 'text-muted-foreground';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"processing-steps\">\n      {steps.map((step, index) => (\n        <div \n          key={step.id} \n          className=\"flex items-center space-x-4\"\n          data-testid={`step-${step.id}`}\n        >\n          {getStepIcon(step)}\n          <div className=\"flex-1\">\n            <h4 className={`font-medium ${getStepTextColor(step)}`}>\n              {step.title}\n            </h4>\n            <p className=\"text-sm text-muted-foreground\">\n              {step.description}\n            </p>\n          </div>\n          <span className={`text-xs font-medium ${getStatusColor(step)}`}>\n            {getStatusText(step)}\n          </span>\n        </div>\n      ))}\n      \n      {status === 'FAILED' && errorMessage && (\n        <div className=\"flex items-center space-x-4 p-4 bg-destructive/10 border border-destructive/20 rounded-lg\">\n          <div className=\"w-10 h-10 bg-destructive/10 rounded-full flex items-center justify-center\">\n            <AlertCircle className=\"h-5 w-5 text-destructive\" />\n          </div>\n          <div className=\"flex-1\">\n            <h4 className=\"font-medium text-destructive\">Processing Failed</h4>\n            <p className=\"text-sm text-destructive/80\" data-testid=\"text-error-message\">\n              {errorMessage}\n            </p>\n          </div>\n        </div>\n      )}\n\n      {status === 'COMPLETED' && (\n        <div className=\"mt-8 text-center\">\n          <p className=\"text-sm text-muted-foreground\">\n            Processing completed successfully! Your document is ready.\n          </p>\n        </div>\n      )}\n\n      {status === 'PROCESSING' && (\n        <div className=\"mt-8 text-center\">\n          <p className=\"text-sm text-muted-foreground\">\n            Estimated time remaining: <span className=\"font-medium text-foreground\">3-5 minutes</span>\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5659},"client/src/components/Processing/ProgressBar.tsx":{"content":"interface ProgressBarProps {\n  progress: number;\n  status: string;\n}\n\nexport default function ProgressBar({ progress, status }: ProgressBarProps) {\n  const getProgressColor = () => {\n    if (status === 'FAILED') return 'bg-destructive';\n    if (status === 'COMPLETED') return 'bg-green-500';\n    return 'bg-gradient-to-r from-primary to-secondary';\n  };\n\n  return (\n    <div className=\"mb-8\">\n      <div className=\"flex justify-between items-center mb-2\">\n        <span className=\"text-sm font-medium text-foreground\">Overall Progress</span>\n        <span className=\"text-sm font-medium text-primary\" data-testid=\"text-progress-percentage\">\n          {progress}%\n        </span>\n      </div>\n      <div className=\"w-full bg-muted rounded-full h-3\">\n        <div \n          className={`h-3 rounded-full transition-all duration-500 ${getProgressColor()}`}\n          style={{ width: `${progress}%` }}\n          data-testid=\"progress-bar\"\n        ></div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":982},"client/src/components/Processing/VideoInfo.tsx":{"content":"import { Clock, FileText, Globe, User } from \"lucide-react\";\n\ninterface VideoInfoProps {\n  title: string;\n  duration: number;\n  documentType: string;\n  youtubeUrl: string;\n}\n\nexport default function VideoInfo({ title, duration, documentType, youtubeUrl }: VideoInfoProps) {\n  const formatDuration = (seconds: number): string => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes}m ${secs}s`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${secs}s`;\n    } else {\n      return `${secs}s`;\n    }\n  };\n\n  const extractVideoId = (url: string): string => {\n    const regex = /(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|m\\.youtube\\.com\\/watch\\?v=)([^&\\n?#]+)/;\n    const match = url.match(regex);\n    return match ? match[1] : '';\n  };\n\n  const videoId = extractVideoId(youtubeUrl);\n  const thumbnailUrl = `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`;\n\n  return (\n    <div className=\"bg-card border border-border rounded-xl p-6 mb-8\">\n      <div className=\"flex items-start space-x-4\">\n        {/* Video thumbnail */}\n        <img \n          src={thumbnailUrl}\n          alt=\"Video thumbnail\"\n          className=\"w-32 h-20 rounded-lg object-cover bg-muted\" \n          onError={(e) => {\n            e.currentTarget.src = \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='128' height='80' viewBox='0 0 128 80'%3E%3Crect width='128' height='80' fill='%23f3f4f6'/%3E%3Ctext x='50%25' y='50%25' font-family='Arial' font-size='12' fill='%239ca3af' text-anchor='middle' dy='.3em'%3EVideo%3C/text%3E%3C/svg%3E\";\n          }}\n          data-testid=\"img-video-thumbnail\"\n        />\n        <div className=\"flex-1\">\n          <h2 className=\"text-xl font-semibold text-foreground mb-2\" data-testid=\"text-video-title\">\n            {title}\n          </h2>\n          <div className=\"grid grid-cols-2 gap-4 text-sm text-muted-foreground\">\n            <div className=\"flex items-center space-x-2\">\n              <Clock className=\"h-4 w-4\" />\n              <span data-testid=\"text-video-duration\">Duration: {formatDuration(duration)}</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <FileText className=\"h-4 w-4\" />\n              <span data-testid=\"text-document-type\">Type: {documentType}</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Globe className=\"h-4 w-4\" />\n              <span>Language: English</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"h-4 w-4\" />\n              <span>Source: YouTube</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2814},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# Overview\n\nVideoScribe is a Video-to-Ebook SaaS application that transforms YouTube videos into professional documents using AI-powered content structuring. The system extracts video transcripts, processes them with OpenAI's GPT models, and generates beautifully formatted documents in various formats including ebooks, tutorials, guides, and recipes.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript, built using Vite for fast development and optimized builds\n- **UI System**: Shadcn/UI components with Radix UI primitives for accessible, customizable interface elements\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables for consistent theming\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Real-time Updates**: WebSocket connection for live progress tracking during document processing\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework for RESTful API endpoints\n- **Database ORM**: Drizzle ORM with PostgreSQL for type-safe database operations\n- **Authentication**: Replit Auth integration with session-based authentication using connect-pg-simple for session storage\n- **Job Processing**: Bull queue system with Redis for asynchronous video processing tasks\n- **AI Integration**: OpenAI API (GPT-5) for content analysis and document structuring\n- **File Generation**: Puppeteer for HTML-to-PDF conversion and document rendering\n\n## Database Design\n- **Primary Database**: PostgreSQL with connection pooling via Neon serverless\n- **Schema Management**: Drizzle migrations with TypeScript schema definitions\n- **Core Tables**: \n  - Users table with plan-based limits and usage tracking\n  - Documents table for generated content storage\n  - Jobs table for processing status and progress tracking\n  - Sessions table for authentication state management\n\n## Processing Pipeline\n- **Video Analysis**: YouTube URL validation and metadata extraction\n- **Transcript Extraction**: Automated caption retrieval from YouTube videos\n- **AI Structuring**: Content analysis and organization using OpenAI's language models\n- **Template Rendering**: HTML template processing with dynamic content injection\n- **Document Generation**: Multi-format output generation (HTML, PDF) with professional styling\n\n## Real-time Communication\n- **WebSocket Server**: Built-in WebSocket support for live progress updates\n- **Progress Tracking**: Real-time job status updates with percentage completion\n- **Error Handling**: Comprehensive error reporting and user notification system\n\n# External Dependencies\n\n## Core Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **OpenAI API**: GPT-5 language model for content analysis and document structuring\n- **YouTube API**: Video metadata and transcript extraction capabilities\n- **Redis**: In-memory data store for job queue management and caching\n\n## Authentication & Session Management\n- **Replit Auth**: OAuth-based authentication system integrated with Replit platform\n- **Session Storage**: PostgreSQL-backed session management with automatic cleanup\n\n## Frontend Libraries\n- **UI Components**: Radix UI primitives with Shadcn/UI component system\n- **Icons**: Lucide React for consistent iconography\n- **Date Handling**: date-fns for relative time formatting\n- **Form Management**: React Hook Form with Zod validation schemas\n\n## Development & Build Tools\n- **Build System**: Vite with TypeScript support and hot module replacement\n- **Code Quality**: TypeScript for type safety across the entire application\n- **Styling**: PostCSS with Tailwind CSS and Autoprefixer\n- **Package Management**: npm with lock file for dependency consistency","size_bytes":3871},"server/services/websocketService.ts":{"content":"import { WebSocketServer, WebSocket } from 'ws';\nimport { IncomingMessage } from 'http';\nimport { parse } from 'url';\nimport { storage } from '../storage';\nimport session from 'express-session';\nimport connectPg from 'connect-pg-simple';\nimport { getSession } from '../replitAuth';\n\ninterface SubscriptionMap {\n  [jobId: string]: Set<AuthenticatedWebSocket>;\n}\n\ninterface AuthenticatedWebSocket extends WebSocket {\n  userId?: string;\n  isAuthenticated?: boolean;\n  sessionId?: string;\n}\n\ninterface ProgressMessage {\n  type: 'progress';\n  jobId: number;\n  status: string;\n  progress: number;\n  currentStep: string | null;\n  errorMessage?: string | null;\n}\n\ninterface SubscriptionMessage {\n  type: 'subscribe';\n  jobId: number;\n}\n\nclass WebSocketService {\n  private wss: WebSocketServer | null = null;\n  private subscriptions: SubscriptionMap = {};\n  private sessionStore: any = null;\n\n  public initialize(server: any): void {\n    // Initialize session store for WebSocket authentication\n    const pgStore = connectPg(session);\n    this.sessionStore = new pgStore({\n      conString: process.env.DATABASE_URL,\n      createTableIfMissing: false,\n      ttl: 7 * 24 * 60 * 60 * 1000, // 1 week\n      tableName: \"sessions\",\n    });\n\n    this.wss = new WebSocketServer({ \n      server, \n      path: '/ws'\n    });\n\n    this.wss.on('connection', async (ws: AuthenticatedWebSocket, req: IncomingMessage) => {\n      console.log('WebSocket connection established from:', req.socket.remoteAddress);\n      \n      // Authenticate the WebSocket connection\n      const isAuth = await this.authenticateConnection(ws, req);\n      if (!isAuth) {\n        ws.close(1008, 'Authentication required');\n        return;\n      }\n\n      this.setupConnectionHandlers(ws);\n    });\n\n    console.log('WebSocket service initialized');\n  }\n\n  private async authenticateConnection(ws: AuthenticatedWebSocket, req: IncomingMessage): Promise<boolean> {\n    try {\n      // Extract session information from cookies\n      const cookies = this.parseCookies(req.headers.cookie || '');\n      \n      // Check for Replit session cookie\n      const sessionCookie = cookies['connect.sid'];\n      if (!sessionCookie) {\n        console.log('No session cookie found for WebSocket connection');\n        return false;\n      }\n\n      // Decode the session ID from the signed cookie\n      // The session cookie is signed with the session secret\n      const sessionId = this.decodeSessionId(sessionCookie);\n      if (!sessionId) {\n        console.log('Invalid session cookie format');\n        return false;\n      }\n\n      // Validate session against the session store\n      const sessionData = await this.getSessionData(sessionId);\n      if (!sessionData) {\n        console.log('Session not found in store');\n        return false;\n      }\n\n      // Check if user is authenticated in the session\n      const user = sessionData.passport?.user;\n      if (!user || !user.claims || !user.claims.sub) {\n        console.log('No authenticated user in session');\n        return false;\n      }\n\n      // Check if session is expired\n      const now = Math.floor(Date.now() / 1000);\n      if (user.expires_at && now > user.expires_at) {\n        console.log('Session expired');\n        return false;\n      }\n      \n      // Set authentication info on WebSocket\n      ws.isAuthenticated = true;\n      ws.userId = user.claims.sub;\n      ws.sessionId = sessionId;\n      \n      console.log('WebSocket authenticated for user:', ws.userId);\n      return true;\n      \n    } catch (error) {\n      console.error('WebSocket authentication error:', error);\n      return false;\n    }\n  }\n\n  private parseCookies(cookieHeader: string): { [key: string]: string } {\n    const cookies: { [key: string]: string } = {};\n    if (!cookieHeader) return cookies;\n    \n    cookieHeader.split(';').forEach(cookie => {\n      const parts = cookie.trim().split('=');\n      if (parts.length >= 2) {\n        const key = parts[0].trim();\n        // Handle cookies with = in values by joining the rest\n        const value = parts.slice(1).join('=');\n        cookies[key] = value;\n      }\n    });\n    return cookies;\n  }\n\n  private decodeSessionId(signedCookie: string): string | null {\n    try {\n      // Handle both signed and unsigned cookies for robustness\n      if (signedCookie.startsWith('s:')) {\n        // Signed cookie format: s:sessionId.signature\n        const unsigned = signedCookie.slice(2);\n        const dotIndex = unsigned.lastIndexOf('.');\n        if (dotIndex > 0) {\n          return unsigned.slice(0, dotIndex);\n        }\n      } else {\n        // Handle unsigned cookie as fallback\n        const decoded = decodeURIComponent(signedCookie);\n        if (decoded.length > 0) {\n          return decoded;\n        }\n      }\n      return null;\n    } catch (error) {\n      console.error('Error decoding session ID:', error);\n      return null;\n    }\n  }\n\n  private async getSessionData(sessionId: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.sessionStore.get(sessionId, (err: any, session: any) => {\n        if (err) {\n          console.error('Session store error:', err);\n          resolve(null);\n        } else {\n          resolve(session);\n        }\n      });\n    });\n  }\n\n  private setupConnectionHandlers(ws: AuthenticatedWebSocket): void {\n    ws.on('message', async (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        \n        if (data.type === 'subscribe' && data.jobId) {\n          await this.handleSubscription(ws, data.jobId);\n        } else if (data.type === 'unsubscribe' && data.jobId) {\n          await this.handleUnsubscription(ws, data.jobId);\n        } else if (data.type === 'ping') {\n          // Respond to ping with pong for connection health check\n          ws.send(JSON.stringify({ type: 'pong' }));\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n        ws.send(JSON.stringify({\n          type: 'error',\n          message: 'Invalid message format'\n        }));\n      }\n    });\n\n    ws.on('close', () => {\n      console.log('WebSocket connection closed for user:', ws.userId);\n      this.cleanupSubscriptions(ws);\n    });\n\n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n      this.cleanupSubscriptions(ws);\n    });\n  }\n\n  private async handleSubscription(ws: AuthenticatedWebSocket, jobId: number): Promise<void> {\n    try {\n      if (!ws.isAuthenticated || !ws.userId) {\n        ws.send(JSON.stringify({\n          type: 'error',\n          message: 'Authentication required'\n        }));\n        return;\n      }\n\n      // Verify that the user owns this job\n      const job = await storage.getJob(jobId);\n      if (!job) {\n        ws.send(JSON.stringify({\n          type: 'error',\n          message: 'Job not found'\n        }));\n        return;\n      }\n\n      // Verify job ownership - critical security check\n      if (job.userId !== ws.userId) {\n        console.log(`User ${ws.userId} attempted to access job ${jobId} owned by ${job.userId}`);\n        ws.send(JSON.stringify({\n          type: 'error',\n          message: 'Unauthorized: You can only access your own jobs'\n        }));\n        return;\n      }\n      \n      const jobIdStr = jobId.toString();\n      \n      // Initialize subscription set for this job if it doesn't exist\n      if (!this.subscriptions[jobIdStr]) {\n        this.subscriptions[jobIdStr] = new Set();\n      }\n\n      // Check if already subscribed to avoid duplicates\n      if (this.subscriptions[jobIdStr].has(ws)) {\n        console.log(`WebSocket already subscribed to job ${jobId} for user ${ws.userId}`);\n        // Still send confirmation and current status\n      } else {\n        // Add the WebSocket to the subscription set\n        this.subscriptions[jobIdStr].add(ws);\n        console.log(`WebSocket subscribed to job ${jobId} for user ${ws.userId}`);\n      }\n\n      // Send subscription confirmation\n      ws.send(JSON.stringify({\n        type: 'subscribed',\n        jobId: jobId,\n        message: 'Successfully subscribed to job updates'\n      }));\n      \n      // Send current job status immediately\n      const document = await storage.getDocument(job.documentId);\n      const currentStatus: ProgressMessage = {\n        type: 'progress',\n        jobId: job.id,\n        status: job.status || 'PENDING',\n        progress: job.progress || 0,\n        currentStep: job.currentStep || 'Starting...',\n        errorMessage: job.errorMessage || null\n      };\n      \n      ws.send(JSON.stringify(currentStatus));\n\n    } catch (error) {\n      console.error('Subscription error:', error);\n      ws.send(JSON.stringify({\n        type: 'error',\n        message: 'Failed to subscribe to job updates'\n      }));\n    }\n  }\n  \n  private async handleUnsubscription(ws: AuthenticatedWebSocket, jobId: number): Promise<void> {\n    try {\n      if (!ws.isAuthenticated || !ws.userId) {\n        ws.send(JSON.stringify({\n          type: 'error',\n          message: 'Authentication required'\n        }));\n        return;\n      }\n      \n      const jobIdStr = jobId.toString();\n      \n      if (this.subscriptions[jobIdStr]) {\n        this.subscriptions[jobIdStr].delete(ws);\n        \n        // Clean up empty subscription sets\n        if (this.subscriptions[jobIdStr].size === 0) {\n          delete this.subscriptions[jobIdStr];\n        }\n        \n        console.log(`WebSocket unsubscribed from job ${jobId} for user ${ws.userId}`);\n      }\n      \n      // Send unsubscription confirmation\n      ws.send(JSON.stringify({\n        type: 'unsubscribed',\n        jobId: jobId,\n        message: 'Successfully unsubscribed from job updates'\n      }));\n      \n    } catch (error) {\n      console.error('Unsubscription error:', error);\n      ws.send(JSON.stringify({\n        type: 'error',\n        message: 'Failed to unsubscribe from job updates'\n      }));\n    }\n  }\n\n  private cleanupSubscriptions(ws: AuthenticatedWebSocket): void {\n    // Remove this WebSocket from all subscription sets\n    Object.keys(this.subscriptions).forEach(jobId => {\n      this.subscriptions[jobId].delete(ws);\n      \n      // Clean up empty subscription sets\n      if (this.subscriptions[jobId].size === 0) {\n        delete this.subscriptions[jobId];\n      }\n    });\n  }\n\n  public broadcastProgress(jobId: number, progress: ProgressMessage): void {\n    const jobIdStr = jobId.toString();\n    const subscribers = this.subscriptions[jobIdStr];\n    \n    if (!subscribers || subscribers.size === 0) {\n      return;\n    }\n\n    const message = JSON.stringify(progress);\n    const deadConnections = new Set<AuthenticatedWebSocket>();\n\n    subscribers.forEach(ws => {\n      if (ws.readyState === WebSocket.OPEN) {\n        try {\n          ws.send(message);\n        } catch (error) {\n          console.error('Error sending progress update:', error);\n          deadConnections.add(ws);\n        }\n      } else {\n        deadConnections.add(ws);\n      }\n    });\n\n    // Clean up dead connections\n    deadConnections.forEach(ws => {\n      subscribers.delete(ws);\n    });\n\n    if (subscribers.size === 0) {\n      delete this.subscriptions[jobIdStr];\n    }\n\n    console.log(`Broadcasted progress update for job ${jobId} to ${subscribers.size} subscribers`);\n  }\n\n  public getSubscriberCount(jobId: number): number {\n    const jobIdStr = jobId.toString();\n    return this.subscriptions[jobIdStr]?.size || 0;\n  }\n\n  public getAllSubscriptions(): { [jobId: string]: number } {\n    const result: { [jobId: string]: number } = {};\n    Object.keys(this.subscriptions).forEach(jobId => {\n      result[jobId] = this.subscriptions[jobId].size;\n    });\n    return result;\n  }\n}\n\n// Export a singleton instance\nexport const websocketService = new WebSocketService();","size_bytes":11713}},"version":1}